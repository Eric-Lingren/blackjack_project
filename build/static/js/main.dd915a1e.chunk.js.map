{"version":3,"sources":["css/images/blackjackLogo.jpg","css/images/$1.png","css/images/$5.png","css/images/$25.png","css/images/$50.png","css/images/$100.png","css/images/$500.png","css/images/cardBack.png","components/Navbar.js","components/Home.js","DisplayACard.js","SplitHand.js","Play.js","Learn.js","Train.js","context/CorrectPlayProvider.js","components/BasicStrategyStatsModal/BasicStrategyStatsModal.js","TrainBasicStrategy.js","TrainSelfPacedCount.js","TrainSpeedCount.js","TrainRunningCountTrueCount.js","TrainBetSizing.js","App.js","context/CasinoRulesProvider.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","className","Link","to","Home","src","homeLogo","alt","DisplayCard","props","card","SplitHand","playerClikedSplit","splitCards","map","dealtCard","DisplayACard","Play","dealHand","dealOneCard","dealerHandImages","playerHandImages","playerHandImages2","playerHandTotal","dealerHandTotal","playerStands","playerDoubles","playerDoubleBet","playerSplits","playerBet","playerBankroll","bet1","bet5","bet25","bet50","bet100","bet500","playerClickedStand","playerClickedDouble","playerClickedSplit","dealerWins","playerWins","playerBust","dealerBust","clearBet","gameCount","hideShowCount","cardsDealt","decksPlayed","remainingCards","remainingDecks","trueCount","playerBaseBet","showCountDiv","showAdviceDiv","hideShowAdvice","playerAdvantage","dealerCardBackShowing","stat","dbl","doubleDown","showTheCount","showTheAdvice","splitTheseCards","alert","betSize","Math","round","onClick","cardBack","oneDollar","fiveDollar","twentyFiveDollar","fiftyDollar","hundredDollar","fiveHundredDollar","src_SplitHand","Learn","Train","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Component","CorrectPlayContext","React","createContext","CorrectPlayProvider","setCorrectPlayRules","name","checked","setState","defineProperty","setCorrectHandsPlayed","playerWasCorrect","currentHandType","console","log","prevState","hardHandsCorrect","softHandsCorrect","splitHandsCorrect","toggleBasicStrategyStats","showBasicStrategyStats","checkSplitHand","dealerHand","playerHand","splitHandsPlayed","currentKindOfHandBeingPlayed","pHand","dHand","correctPlay","dealerStandsSoft17","surrenderAllowed","doubleAfterSplitAllowed","checkSoftHand","softHandsPlayed","doubleAllowed","checkHardHand","hardHandsPlayed","Provider","value","children","withCorrectPlay","C","Consumer","assign","show","totalPercentageCorrect","toFixed","hardPercentageCorrect","softPercentageCorrect","splitPercentageCorrect","totalPercentageClass","hardPercentageClass","softPercentageClass","splitPercentageClass","modal","document","getElementById","window","addEventListener","e","target","id","TrainBasicStrategy","dealCard","axios","get","concat","deckID","then","response","dealerCardValue","data","cards","playerCardValue1","playerCardValue2","dealerCardImage","image","playerCardImage1","playerCardImage2","options","hand","checkButton","toUpperCase","dealerImages","playerCard1","playerCard2","playerImage1","playerImage2","remainingCardsInDeck","remaining","buttonList","showCardData","dCard","dCardNumber","pCard1","pCard1Number","pCard2","pCard2Number","dhand","playerCard1IsAce","playerCard2IsAce","parseInt","whatCheckHandFunctionToRun","answer","guess","buttons","sendUpdatedPlayerStatsToProvider","buttonClass","bottomMargin","checkStats","handleRulesCheckbox","playerGuess","_this2","deck_id","onChange","type","style","marginBottom","components_BasicStrategyStatsModal_BasicStrategyStatsModal","TrainSelfPacedCount","oneCardDealt","code","cardImage","cardValue","toConsumableArray","cardsDealtImages","cardsDealtValues","currentCardValue","whatsTheCount","count","hideShowRunningCount","runningCountVisible","hideShowCountDiv","TrainSpeedCount","whatsTheCountVisible","speed","howFast","timerId","setInterval","setTimeout","clearInterval","countIsFinished","displayCount","handleChange","event","_this$setState","cardsPerSecond","placeholder","TrainRunningCountSpeedCount","clickNew","generateNumbers","decksLeftArray","randomDeck","floor","random","length","countArray","randomCount","clickCheck","deck","correctAnswer","checkAnswer","guessNumber","wereTheyRight","TrainBetSizing","generateRandomCount","betCountArray","answerString","displayOutputCorrect","displayOutputIncorrect","output","App","preventDefault","dealtCards","forEach","pickACard","playerHandValues","deckCount","dealerHandValues","countDealerTotal","countPlayerTotal","whatsTheCountGame","initialBlackjack","dealerHandTotalPostAces","playerHandTotalPostAces","checkWhoWon","resetHand","numericalHand","push","dealerHasAce","stringToNumberValue","reduce","accumulator","currentValue","dealerHandTotalPreAces","adjustDealerCountWithAces","dealerTotalPreAces","finalDealerTotal","didDealerBust","hand2","playerHandValues2","playerNumericalHandValues","playerHasAce","playerHandTotalPreAces","adjustPlayerCountWithAces","playerTotalPreAces","finalPlayerTotal","didPlayerBust","playerHand2","playerNumericalHandValues2","playerHandTotal2","playerHandTotal2PreAces","playerHandTotal2PostAces","checkWhoWonFunctionRan","playerBust2","dealerHits","pop","calculateSplitHandTotals","numericalHand1","numericalHand2","reducer","playerHandTotal1","adjustPlayerSplitCountWithAces","playerTotalPreAces1","playerTotalPreAces2","finalPlayerTotal1","finalPlayerTotal2","didPlayerBustSplitHand1","myCountingArray","element","numbericalElement","myConvertedCountArray","number","countArrayValues","dealerCardFaceShowing","_this3","components_Navbar","Switch","Route","exact","path","component","render","src_Play","playerHand2Total","TrainRunningCountTrueCount","CasinoRulesContext","CasinoRulesProvider","setGameRules","ReactDOM","HashRouter","context_CorrectPlayProvider","context_CasinoRulesProvider","src_App"],"mappings":"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","file":"static/js/main.dd915a1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/blackjackLogo.a7b2b6e3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/$1.9695350f.png\";","module.exports = __webpack_public_path__ + \"static/media/$5.8dc5f62d.png\";","module.exports = __webpack_public_path__ + \"static/media/$25.b5a4a437.png\";","module.exports = __webpack_public_path__ + \"static/media/$50.09027d40.png\";","module.exports = __webpack_public_path__ + \"static/media/$100.a6391183.png\";","module.exports = __webpack_public_path__ + \"static/media/$500.0a3f4606.png\";","module.exports = __webpack_public_path__ + \"static/media/cardBack.25b4a4d6.png\";","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport '../css/navbar.css'\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <div className='navContainer'>\r\n            <Link className='navLinks' to=\"/\">Home</Link>\r\n            <Link className='navLinks' to=\"/Learn\">Learn</Link>\r\n            <Link className='navLinks' to=\"/Train\">Train</Link>\r\n            <Link className='navLinks' to=\"/Play\">Play</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from 'react'\r\nimport '../css/home.css'\r\nimport homeLogo from '../css/images/blackjackLogo.jpg'\r\n\r\nconst Home = () => {\r\n\r\n    return (\r\n        <div className='homeWrapper'>\r\n            <h1 className='homeText'>So you want to be a card counter...? </h1>\r\n            <img className='homeLogo' src={homeLogo} alt=''></img>\r\n            <h1 className='homeText'>You better start by learning! </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react'\r\n\r\nconst DisplayCard = (props) => {\r\n    const {card} = props;\r\n\r\n    return(\r\n            <img className='displayCard' src={card} alt='card displayed'></img>\r\n    )\r\n}\r\n\r\nexport default DisplayCard","import React from 'react'\r\nimport DisplayACard from './DisplayACard'\r\n\r\nconst SplitHand = (props) => {\r\n    const {playerClikedSplit, splitCards} = props;\r\n\r\n    return (\r\n        <div className={playerClikedSplit === true ? 'splitHand' : 'displayNone'}>\r\n            {props.splitCards.map(dealtCard => <DisplayACard card={splitCards} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SplitHand\r\n\r\n","import React from 'react'\r\nimport './css/play.css'\r\nimport DisplayACard from './DisplayACard'\r\nimport SplitHand from './SplitHand'\r\nimport oneDollar from './css/images/$1.png';\r\nimport fiveDollar from './css/images/$5.png';\r\nimport twentyFiveDollar from './css/images/$25.png';\r\nimport fiftyDollar from './css/images/$50.png';\r\nimport hundredDollar from './css/images/$100.png';\r\nimport fiveHundredDollar from './css/images/$500.png';\r\nimport cardBack from './css/images/cardBack.png'\r\n\r\n\r\nconst Play = (props) => {\r\nconst { dealHand, dealOneCard, dealerHandImages, playerHandImages, playerHandImages2, playerHandTotal, dealerHandTotal, playerStands, playerDoubles, playerDoubleBet, playerSplits, playerBet, playerBankroll, bet1, bet5, bet25, bet50, bet100, bet500, playerClickedStand, playerClickedDouble, playerClickedSplit, dealerWins, playerWins, playerBust, dealerBust, clearBet, gameCount, hideShowCount, cardsDealt, decksPlayed, remainingCards, remainingDecks, trueCount, playerBaseBet, showCountDiv, showAdviceDiv, hideShowAdvice, playerAdvantage, dealerCardBackShowing } = props;\r\n\r\n    function tableStatus(){\r\n        if((playerHandTotal && dealerWins) || (playerHandTotal && playerBust)){\r\n            return <h1 className='tableOutcome'>Dealer Wins</h1>\r\n        } else if( (playerHandTotal && playerWins) || (playerHandTotal && dealerBust) ){\r\n            return <h1 className='tableOutcome'>Player Wins</h1>\r\n        } else if(playerHandTotal && playerHandTotal === dealerHandTotal && playerClickedStand ){\r\n            return <h1 className='tableOutcome'>Push</h1>\r\n        } else { \r\n            return <h1 className='h1TablePlaceholder'>Nothing Here</h1>\r\n        }\r\n    }\r\n    const stat = tableStatus()\r\n\r\n    function doubleDown(){\r\n        //console.log('did player click double: ' + playerClickedDouble)\r\n        if (playerClickedDouble){\r\n            return playerDoubleBet\r\n        }\r\n    }\r\n    const dbl = doubleDown()\r\n\r\n    function optimalBetSize(){\r\n        if(trueCount >= 1){\r\n            return  ( (Math.round(trueCount) * playerBaseBet) )\r\n        }else {\r\n            return playerBaseBet\r\n        }\r\n        \r\n    }\r\n\r\n    function splitHands(){\r\n        \r\n        if(playerClickedSplit){\r\n         alert('The split feature is currently broken and not functioning...')\r\n        // return <h2>Player Total Hand 2: {playerHand2Total} </h2>\r\n        }\r\n    }\r\n\r\n    function showCount(){\r\n        if (showCountDiv){\r\n            return <span>Hide Count</span>\r\n        }else {\r\n            return <span>Show Count</span>\r\n        }\r\n    }\r\n\r\n    function showAdvice(){\r\n        if (showAdviceDiv){\r\n            return <span>Hide Help</span>\r\n        }else {\r\n            return <span>Show Help</span>\r\n        }\r\n    }\r\n\r\n    const showTheCount = showCount()\r\n    const showTheAdvice = showAdvice()\r\n    const splitTheseCards = splitHands()\r\n    const betSize = optimalBetSize()\r\n    return (\r\n        <div className='playContainer'>\r\n            <div className='table'>\r\n\r\n            <div className='bankOptions'>\r\n                    <div className='deckInfo' >\r\n                        <h2 className='helpTitle'>Deck Stats</h2>\r\n                        <h3 className='handTotals'>Decks Played: {decksPlayed}</h3>\r\n                        <h3 className='handTotals'>Remaining Decks: {remainingDecks} </h3>\r\n                    </div>\r\n                    \r\n                    <div className='bankStats'>\r\n                        <h2  className='helpTitle'>Player Bankroll: ${playerBankroll} </h2>\r\n                        <h3  className='handTotals'>Player Bet: ${playerBet} </h3>\r\n                        <h3  className='handTotals'>Double Bet: ${dbl}</h3>\r\n                    </div>\r\n                    <button className='clearBetButton' onClick={clearBet} > Clear Bet </button>\r\n                </div>\r\n\r\n                <div className='dealerHand'>\r\n                {dealerHandImages.map(dealtCard => <DisplayACard card={dealtCard} />)}\r\n                <img className={dealerCardBackShowing? 'cardBackVisible' : 'cardBackHidden'} src={cardBack } alt=''></img>\r\n                </div>\r\n\r\n                <div className='statsContainer'>\r\n                <button className='showHelpButton' onClick={hideShowAdvice} > {showTheAdvice}</button>\r\n                <div className={showAdviceDiv ? 'showAdvice' : 'hideAdvice'}>\r\n                    <h2 className='helpTitle'>Hand Totals</h2>\r\n                    <h3 className='handTotals'>Dealer Total: {dealerHandTotal}</h3>\r\n                    <h3 className='handTotals'>Player Total: {playerHandTotal} </h3>\r\n                </div>\r\n                    <div className={showCountDiv ? 'showCountStats' : 'hideCountStats'}>\r\n                        <h2 className='helpTitle'>Count Stats:</h2>\r\n                        <h3 className='handTotals'>Running Count: {gameCount} </h3>\r\n                        <h3 className='handTotals'>True Count: {trueCount} </h3>\r\n                        <h3 className='handTotals'>Cards Dealt: {cardsDealt} </h3>\r\n                        <h3 className='handTotals'>Remaining Cards: {remainingCards} </h3>\r\n                        <h3 className='handTotals'>Player Advantage: {playerAdvantage}% </h3>\r\n                        <h3 className='handTotals'>Optimal Bet: {betSize }</h3> \r\n                    </div>\r\n                    <button className='showCountButton' onClick={hideShowCount} > {showTheCount}</button>\r\n                </div>\r\n\r\n                <div className='centerTableOptions'>\r\n                    \r\n                    <button className='dealHandButton' onClick={dealHand} >Deal Hand</button><br></br>\r\n                    <div className='centerPlayButtonContainer'>\r\n                        <button className='playButtons' onClick={dealOneCard} >Hit</button>\r\n                        <button className='playButtons' onClick={playerStands} > Stand </button>\r\n                        <button className='playButtons' onClick={playerDoubles} > Double </button>\r\n                        <button className='playButtons' onClick={playerSplits} > Split </button><br></br>\r\n                    </div>\r\n                    <div> \r\n                    { stat }\r\n                    </div>\r\n                    \r\n                </div>\r\n              \r\n                {splitTheseCards}\r\n                \r\n\r\n                <div className='playerHand'>\r\n                    {playerHandImages.map(dealtCard => <DisplayACard card={dealtCard} />)}                 \r\n                </div>\r\n                <div className='chipContainer'>\r\n                    <img src={oneDollar} onClick={bet1} alt='chip' className='pokerChip'></img>\r\n                    <img src={fiveDollar} onClick={bet5} alt='chip' className='pokerChip'></img>\r\n                    <img src={twentyFiveDollar} onClick={bet25} alt='chip' className='pokerChip'></img>\r\n                    <img src={fiftyDollar} onClick={bet50} alt='chip' className='pokerChip'></img>\r\n                    <img src={hundredDollar} onClick={bet100} alt='chip' className='pokerChip'></img>\r\n                    <img src={fiveHundredDollar} onClick={bet500} alt='chip' className='pokerChip'></img>\r\n                </div>\r\n                \r\n                <SplitHand playerClickedSplit={playerClickedSplit} splitCards={playerHandImages2} />\r\n                {/* <Hand playerClickedSplit={playerClickedSplit} playerHandImages={playerHandImages} card={dealtCard} /> */}\r\n                \r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Play","import React from 'react'\r\nimport './css/learn.css'\r\n\r\nconst Learn = () => {\r\n\r\n    return (\r\n        <div className='learnWrapper'>\r\n\r\n            <div className='learnContainer'>\r\n            <h1 className='pageHeading'>Learn Blackjack</h1>\r\n\r\n            <h1 className='levelHeading1'> Level 1: White Belt </h1>\r\n            <h1 className='levelHeading2'> Starting with the fundamentals... </h1>\r\n            <p className='paragraphText'>\r\n            Blackjack is beatable.  Here is where you learn how to do it.  This is a very simple game, but it is a game of mathematics not a game of luck or gambling.  There are correct decisions you can make that turn the casino's advantage into your advantage.  My webisite is designed to help the average card player turn into an extraordinary card player.  We have everything you need to improve your play.  Please note that all the drills and calculations on this site are for casino rules where the dealer stands on all 17's.  Enhanced features and more in depth playing rules will be added in the future.\r\n            </p>\r\n\r\n            <h1 className='levelHeading1'> Level 2: Orange Belt </h1>\r\n            <h1 className='levelHeading2'> What is basic strategy...? </h1>\r\n            <p className='paragraphText'>\r\n            Basic strategy is the mathamatically correct play for every combination of cards.  There are 312 diffent play combinations to remember and every one is different.  You can practice them all on the training page!  Make sure to reference a basic strategy chart.  Once you can play basic strategy perfectly on every hand, you will reduce the casino advantage from about 10% to 0.5%.\r\n            </p>\r\n\r\n            <h1 className='levelHeading1'> Level 3: Blue Belt </h1>\r\n            <h1 className='levelHeading2'> What is card counting...? </h1>\r\n            <p className='paragraphText'>\r\n            Card counting is not a mysterious and magical skill.  Anyone can learn it.  Learning basic strategy is actually much more complex than learning to count cards so if you have already done that, the hard part is out of the way!  Counting is simply keeping track of what cards have already been played in order to better predict the cards that will be played in the future.  Each card is assigned an arbitrary value.  2-6 are assigned a value of +1, 7-9 are assigned a value of 0 and we ignore them.  10, face, and ace's are assigned a value of -1.  When more high cards are played we know that there will be more low cards in the future and vice versa.  We keep track of this with the running count.  Remember that a positive count is good for the player and a negative count is good for the casino.\r\n            </p>\r\n\r\n            <h1 className='levelHeading1'> Level 4: Purple Belt </h1>\r\n            <h1 className='levelHeading2'> Running count vs true count...? </h1>\r\n            <p className='paragraphText'>\r\n            Now that we have learned how to keep track of the running count, we need to be able to calculate our exact advantage over the casino by converting the running count into the true count.  Again, this is not complex.  Simply divide the running count by how many decks are left to be played!  For each true count of 1, the advantage shifts to the player by 0.5%.  For example if the running count is +8 and there are 2 decks left, that puts the true count at +4.  This means the player now has a 3.5% advantage over the casino (remember that if we play perfect basic strategey the casino still has a 0.5% advantage.)  Card counting is really that simple!\r\n            </p>\r\n\r\n            <h1 className='levelHeading1'> Level 5: Brown Belt </h1>\r\n            <h1 className='levelHeading2'> How to Bet...? </h1>\r\n            <p className='paragraphText'>\r\n            Now is where we apply our advantage and make money.  Why should we only bet the table minimum bet if we know that we now have a 3.5% advantage over the casino?  We wouldn't! When we have the advantage we need to bet large!  There is a wide varitey of opinions on how to do this, but the general rule of thumb is for every time the true count increases by 1 we need to double our bet.  By following all these rules it is possible to make your minimum bet size every for hour of playing.\r\n            </p>\r\n\r\n            <h1 className='levelHeading1'> Level 5: Black Belt </h1>\r\n            <h1 className='levelHeading2'> Whats next...? </h1>\r\n            <p className='paragraphText'>\r\n            You now know the basics of how to count cards!  If this is something you are interested in learning more about there are a varitey of resources online.  Please use all the training drills and games on this site to practice and improve both your skills and speed.  You cant play professionally until you train like a professional.\r\n            </p>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Learn","import React, {Component} from 'react'\r\nimport './css/train.css'\r\nimport {Link} from 'react-router-dom'\r\n\r\nclass Train extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {   \r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='trainingWrapper'>\r\n            \r\n                <div className='trainLinksContainer'>\r\n                    <h1 className='trainingDrillsHeader'>Training Drills:</h1>\r\n                    <Link className='trainLinks' to=\"/TrainBasicStrategy\">Basic Strategy</Link>\r\n                    <Link className='trainLinks' to=\"/TrainSelfPacedCount\">Self Paced Count</Link>\r\n                    <Link className='trainLinks' to=\"/TrainSpeedCount\">Speed Count</Link>\r\n                    <Link className='trainLinks' to=\"/TrainRunningCountTrueCount\">True Count</Link>\r\n                    <Link className='trainLinks' to=\"/TrainBetSizing\">Bet Sizing</Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Train","import React, { Component } from 'react';\r\n\r\nconst CorrectPlayContext = React.createContext()\r\n\r\nclass CorrectPlayProvider extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            correctPlay: '',\r\n            dealerStandsSoft17: false,\r\n            doubleAllowed: false,\r\n            doubleAfterSplitAllowed: false,\r\n            surrenderAllowed: false,\r\n            hardHandsPlayed: 0,\r\n            hardHandsCorrect: 0,\r\n            softHandsPlayed: 0,\r\n            softHandsCorrect: 0,\r\n            splitHandsPlayed: 0,\r\n            splitHandsCorrect: 0,\r\n            currentKindOfHandBeingPlayed: '',\r\n            showBasicStrategyStats: false,\r\n        }\r\n    }\r\n\r\n    setCorrectPlayRules = (name, checked) => {\r\n        this.setState({\r\n            [name]: checked\r\n        })\r\n    }\r\n\r\n    setCorrectHandsPlayed = (playerWasCorrect, currentHandType) => {\r\n        console.log(playerWasCorrect, currentHandType) \r\n        if (currentHandType === 'HARD'){\r\n            if(playerWasCorrect){\r\n                this.setState(prevState =>{\r\n                    return {\r\n                        hardHandsCorrect: prevState.hardHandsCorrect += 1\r\n                    }\r\n                })\r\n            } \r\n        } else if (currentHandType === 'SOFT'){\r\n            if(playerWasCorrect){\r\n                this.setState(prevState =>{\r\n                    return {\r\n                        softHandsCorrect: prevState.softHandsCorrect += 1\r\n                    }\r\n                })\r\n            } \r\n        } else {\r\n            if(playerWasCorrect){\r\n                this.setState(prevState =>{\r\n                    return {\r\n                        splitHandsCorrect: prevState.splitHandsCorrect += 1\r\n                    }\r\n                })\r\n            } \r\n        }\r\n    }\r\n\r\n    toggleBasicStrategyStats = () => {\r\n        if (this.state.showBasicStrategyStats === false){\r\n            this.setState({showBasicStrategyStats: true})\r\n        } else{\r\n            this.setState({showBasicStrategyStats: false})\r\n        }\r\n    }\r\n\r\n    checkSplitHand = (dealerHand, playerHand) => {\r\n        this.setState(prevState => {\r\n            return{\r\n                splitHandsPlayed: prevState.splitHandsPlayed += 1,\r\n                currentKindOfHandBeingPlayed: 'SPLIT'\r\n            }\r\n        })\r\n\r\n        const pHand = playerHand;\r\n        const dHand = dealerHand;\r\n\r\n        if(pHand === 22){\r\n            console.log('the correct play is SPLIT')\r\n            this.setState({\r\n                correctPlay: 'SPLIT',\r\n            })\r\n        } else if (pHand === 20){\r\n            console.log('the correct play is STAND')\r\n            this.setState({\r\n                correctPlay: 'STAND',\r\n            })\r\n        } else if (pHand === 16){\r\n            if (dHand === 11 && this.dealerStandsSoft17 === false && this.state.surrenderAllowed === true) {\r\n                console.log('the correct play is SURRENDER')\r\n                this.setState({\r\n                    correctPlay: 'SURRENDER',\r\n                })\r\n            } else {\r\n                console.log('the correct play is SPLIT')\r\n                this.setState({\r\n                    correctPlay: 'SPLIT',\r\n                })\r\n            }\r\n        } else if((pHand === 4 || pHand === 6) && dHand <= 3){\r\n            if(this.state.doubleAfterSplitAllowed === true){\r\n                console.log('the correct play is SPLIT')\r\n                this.setState({\r\n                    correctPlay: 'SPLIT',\r\n                })\r\n            } else if (this.state.doubleAfterSplitAllowed === false){\r\n                console.log('the correct play is HIT')\r\n                this.setState({\r\n                    correctPlay: 'HIT',\r\n                })\r\n            }   \r\n        } else if((pHand === 4 || pHand === 6) && dHand <= 7){\r\n            console.log('the correct play is SPLIT')\r\n            this.setState({\r\n                correctPlay: 'SPLIT',\r\n            })\r\n        } else if((pHand === 4 || pHand === 6) && dHand <= 11){\r\n            console.log('the correct play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if(pHand === 8 && dHand <= 4){\r\n            console.log('the correct play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if (pHand === 8 && dHand <= 6){\r\n            if(this.state.doubleAfterSplitAllowed === true){\r\n                console.log('the correct play is SPLIT')\r\n                this.setState({\r\n                    correctPlay: 'SPLIT',\r\n                })\r\n            } else if (this.state.doubleAfterSplitAllowed === false){\r\n                console.log('the correct play is HIT')\r\n                this.setState({\r\n                    correctPlay: 'HIT',\r\n                })\r\n            }   \r\n        } else if (pHand === 8 && dHand <= 11){\r\n            console.log('the correct play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if (pHand === 12 && dHand === 2){\r\n            if(this.state.doubleAfterSplitAllowed === true){\r\n                console.log('the correct play is SPLIT')\r\n                this.setState({\r\n                    correctPlay: 'SPLIT',\r\n                })\r\n            } else if (this.state.doubleAfterSplitAllowed === false){\r\n                console.log('the correct play is HIT')\r\n                this.setState({\r\n                    correctPlay: 'HIT',\r\n                })\r\n            }\r\n        } else if (pHand === 12 && dHand <= 6){\r\n            console.log('the correct play is SPLIT')\r\n            this.setState({\r\n                correctPlay: 'SPLIT',\r\n            })\r\n        } else if (pHand === 12 && dHand <= 11){\r\n            console.log('the correct play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if (pHand === 14 && dHand <= 7){\r\n            console.log('the correct play is SPLIT')\r\n            this.setState({\r\n                correctPlay: 'SPLIT',\r\n            })\r\n        } else if (pHand === 14 && dHand <= 11){\r\n            console.log('the correct play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if (pHand === 18 & (dHand === 7 || dHand === 10 || dHand === 11 ) ){\r\n            console.log('the correct play is STAND')\r\n            this.setState({\r\n                correctPlay: 'STAND',\r\n            })\r\n        }  else if (pHand === 18 && dHand <= 9 ){\r\n            console.log('the correct play is SPLIT')\r\n            this.setState({\r\n                correctPlay: 'SPLIT',\r\n            })\r\n        }\r\n    }\r\n    \r\n    checkSoftHand = (dealerHand, playerHand) => {\r\n        const pHand = playerHand;\r\n        const dHand = dealerHand;\r\n\r\n        this.setState(prevState => {\r\n            return{\r\n                softHandsPlayed: prevState.softHandsPlayed += 1,\r\n                currentKindOfHandBeingPlayed: 'SOFT'\r\n            }\r\n        })\r\n\r\n        if (pHand >= 20){\r\n            console.log('the correct play is STAND')\r\n            this.setState({\r\n                correctPlay: 'STAND',\r\n            })\r\n        } else if (pHand === 19){\r\n            if (this.state.dealerStandsSoft17 === true){\r\n                console.log('the correct play is STAND')\r\n                this.setState({\r\n                    correctPlay: 'STAND',\r\n                })\r\n            } else if (this.state.dealerStandsSoft17 === false){\r\n                if(dHand === 6){\r\n                    if (this.state.doubleAllowed === true){\r\n                        console.log('the correct play is DOUBLE')\r\n                        this.setState({\r\n                        correctPlay: 'DOUBLE',\r\n                        })\r\n                    } else if (this.state.doubleAllowed === false){\r\n                        console.log('the correct play is STAND')\r\n                        this.setState({\r\n                        correctPlay: 'STAND',\r\n                        })\r\n                    }\r\n                } else {\r\n                    console.log('the correct play is STAND')\r\n                    this.setState({\r\n                    correctPlay: 'STAND',\r\n                    })\r\n                }\r\n            }  \r\n        } else if(pHand === 13 && dHand <= 4){\r\n            console.log('the correct play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if (pHand === 13 && dHand <= 6){\r\n            if (this.state.doubleAllowed === true){\r\n                console.log('the correct play is DOUBLE')\r\n                this.setState({\r\n                correctPlay: 'DOUBLE',\r\n                })\r\n            } else if (this.state.doubleAllowed === false){\r\n                console.log('the correct play is HIT')\r\n                this.setState({\r\n                correctPlay: 'HIT',\r\n                })\r\n            }\r\n        } else if(pHand === 13 && dHand <= 11){\r\n            console.log('the correct play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if(pHand === 14 && dHand <= 4){\r\n            console.log('the correct play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if (pHand === 14 && dHand <= 6){\r\n            if (this.state.doubleAllowed === true){\r\n                console.log('the correct play is DOUBLE')\r\n                this.setState({\r\n                correctPlay: 'DOUBLE',\r\n                })\r\n            } else if (this.state.doubleAllowed === false){\r\n                console.log('the correct play is HIT')\r\n                this.setState({\r\n                correctPlay: 'HIT',\r\n                })\r\n            }\r\n        } else if(pHand === 14 && dHand <= 11){\r\n            console.log('the correct play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if(pHand === 15 && dHand <= 3){\r\n            console.log('the correct play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if (pHand === 15 && dHand <= 6){\r\n            if (this.state.doubleAllowed === true){\r\n                console.log('the correct play is DOUBLE')\r\n                this.setState({\r\n                correctPlay: 'DOUBLE',\r\n                })\r\n            } else if (this.state.doubleAllowed === false){\r\n                console.log('the correct play is HIT')\r\n                this.setState({\r\n                correctPlay: 'HIT',\r\n                })\r\n            }\r\n        } else if(pHand === 15 && dHand <= 11){\r\n            console.log('the correct play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        }  else if(pHand === 16 && dHand <= 3){\r\n            console.log('the correct play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if (pHand === 16 && dHand <= 6){\r\n            if (this.state.doubleAllowed === true){\r\n                console.log('the correct play is DOUBLE')\r\n                this.setState({\r\n                correctPlay: 'DOUBLE',\r\n                })\r\n            } else if (this.state.doubleAllowed === false){\r\n                console.log('the correct play is HIT')\r\n                this.setState({\r\n                correctPlay: 'HIT',\r\n                })\r\n            }\r\n        } else if(pHand === 16 && dHand <= 11){\r\n            console.log('the correct play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if(pHand === 17 && dHand === 2){\r\n            console.log('the correct play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if (pHand === 17 && dHand <= 6){\r\n            if (this.state.doubleAllowed === true){\r\n                console.log('the correct play is DOUBLE')\r\n                this.setState({\r\n                correctPlay: 'DOUBLE',\r\n                })\r\n            } else if (this.state.doubleAllowed === false){\r\n                console.log('the correct play is HIT')\r\n                this.setState({\r\n                correctPlay: 'HIT',\r\n                })\r\n            }\r\n        } else if(pHand === 17 && dHand <= 11){\r\n            console.log('the correct play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if(pHand === 18 && dHand === 2){\r\n            if(this.dealerStandsSoft17 === true) {\r\n                console.log('the correct play is STAND')\r\n                this.setState({\r\n                    correctPlay: 'STAND',\r\n                })\r\n            } else if (this.dealerStandsSoft17 === false) {\r\n                if(this.state.doubleAllowed === true){\r\n                    console.log('the correct play is DOUBLE')\r\n                    this.setState({\r\n                        correctPlay: 'DOUBLE',\r\n                    })\r\n                } else if (this.state.doubleAllowed === false){\r\n                    console.log('the correct play is STAND')\r\n                    this.setState({\r\n                        correctPlay: 'STAND',\r\n                    })\r\n                }\r\n            }\r\n        } else if (pHand === 18 && dHand <= 6){\r\n            if(this.state.doubleAllowed === true){\r\n                console.log('the correct play is DOUBLE')\r\n                this.setState({\r\n                    correctPlay: 'DOUBLE',\r\n                })\r\n            } else if (this.state.doubleAllowed === false){\r\n                console.log('the correct play is STAND')\r\n                this.setState({\r\n                    correctPlay: 'STAND',\r\n                })\r\n            }\r\n        } else if(pHand === 18 && dHand <= 8){\r\n            console.log('the correct play is STAND')\r\n            this.setState({\r\n                correctPlay: 'STAND',\r\n            })\r\n        } else if(pHand === 18 && dHand <= 11){\r\n            console.log('the correct play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        }\r\n    }\r\n    \r\n    checkHardHand = (dealerHand, playerHand) => {\r\n        const pHand = playerHand;\r\n        const dHand = dealerHand;\r\n\r\n        this.setState(prevState => {\r\n            return{\r\n                hardHandsPlayed: prevState.hardHandsPlayed += 1,\r\n                currentKindOfHandBeingPlayed: 'HARD'\r\n            }\r\n        })\r\n\r\n        if (pHand <= 8 ){\r\n            console.log('the correct Play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if (pHand > 17) {\r\n            console.log('the correct Play is STAND')\r\n            this.setState({\r\n                correctPlay: 'STAND',\r\n            })\r\n        } else if (pHand === 17) {\r\n            if(this.state.dealerStandsSoft17 === true){\r\n                console.log('the correct Play is STAND')\r\n                this.setState({\r\n                    correctPlay: 'STAND',\r\n                })\r\n            }\r\n            if(this.state.dealerStandsSoft17 === false){\r\n                if(dHand === 11 && this.state.surrenderAllowed === true){\r\n                    console.log('the correct Play is SURRENDER')\r\n                    this.setState({\r\n                        correctPlay: 'SURRENDER',\r\n                    })\r\n                } else {\r\n                    console.log('the correct Play is STAND')\r\n                    this.setState({\r\n                        correctPlay: 'STAND',\r\n                    })\r\n                }\r\n            }\r\n        } else if (pHand === 9 && dHand === 2){\r\n            console.log('the correct Play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if(pHand <= 9 && dHand <= 6){\r\n            if (this.state.doubleAllowed === true){\r\n                console.log('the correct Play is DOUBLE')\r\n                this.setState({\r\n                    correctPlay: 'DOUBLE',\r\n                })\r\n            } else if (this.state.doubleAllowed === false){\r\n                console.log('the correct Play is HIT')\r\n                this.setState({\r\n                    correctPlay: 'HIT',\r\n                })\r\n            } \r\n        } else if(pHand === 9 && dHand <= 11){\r\n            console.log('the correct Play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if(pHand === 10 && dHand <= 9){\r\n            if (this.state.doubleAllowed === true){\r\n                console.log('the correct Play is DOUBLE')\r\n                this.setState({\r\n                    correctPlay: 'DOUBLE',\r\n                })\r\n            } else if (this.state.doubleAllowed === false){\r\n                console.log('the correct Play is HIT')\r\n                this.setState({\r\n                    correctPlay: 'HIT',\r\n                })\r\n            } \r\n        } else if (pHand === 10 && dHand <= 11){\r\n            console.log('the correct Play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if (pHand === 11 && dHand <= 10){\r\n            if (this.state.doubleAllowed === true){\r\n                console.log('the correct Play is DOUBLE')\r\n                this.setState({\r\n                    correctPlay: 'DOUBLE',\r\n                })\r\n            } else if (this.state.doubleAllowed === false){\r\n                console.log('the correct Play is HIT')\r\n                this.setState({\r\n                    correctPlay: 'HIT',\r\n                })\r\n            } \r\n        } else if (pHand === 11 && dHand === 11){\r\n            if (this.state.dealerStandsSoft17 === true){\r\n                console.log('the correct Play is HIT')\r\n                this.setState({\r\n                    correctPlay: 'HIT',\r\n                })\r\n            } else if (this.state.dealerStandsSoft17 === false && this.state.doubleAllowed === true){\r\n                console.log('the correct Play is DOUBLE')\r\n                this.setState({\r\n                    correctPlay: 'DOUBLE',\r\n                })\r\n            }  else if (this.state.dealerStandsSoft17 === false && this.state.doubleAllowed === false){\r\n                console.log('the correct Play is HIT')\r\n                this.setState({\r\n                    correctPlay: 'HIT',\r\n                })\r\n            } \r\n        } else if (pHand === 12 && dHand <= 3){\r\n            console.log('the correct Play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if (pHand === 12 && dHand <= 6){\r\n            console.log('the correct Play is STAND')\r\n            this.setState({\r\n                correctPlay: 'STAND',\r\n            })\r\n        } else if(pHand === 12 && dHand <= 11){\r\n            console.log('the correct Play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if (pHand === 13 && dHand <= 6){\r\n            console.log('the correct Play is STAND')\r\n            this.setState({\r\n                correctPlay: 'STAND',\r\n            })\r\n        } else if (pHand === 13 && dHand <= 11){\r\n            console.log('the correct Play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if (pHand === 14 && dHand <= 6){\r\n            console.log('the correct Play is STAND')\r\n            this.setState({\r\n                correctPlay: 'STAND',\r\n            })\r\n        } else if (pHand === 14 && dHand <= 11){\r\n            console.log('the correct Play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if (pHand === 15 && dHand <= 6){\r\n            console.log('the correct Play is STAND')\r\n            this.setState({\r\n                correctPlay: 'STAND',\r\n            })\r\n        } else if (pHand === 15 && dHand <= 9){\r\n            console.log('the correct Play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        } else if (pHand === 15 && dHand === 10){\r\n            if(this.state.surrenderAllowed === true){\r\n                console.log('the correct Play is SURRENDER')\r\n                this.setState({\r\n                    correctPlay: 'SURRENDER',\r\n                })\r\n            } else if (this.state.surrenderAllowed === false){\r\n                console.log('the correct Play is HIT')\r\n                this.setState({\r\n                    correctPlay: 'HIT',\r\n                })\r\n            }   \r\n        } else if (pHand === 15 && dHand === 11){\r\n            if(this.state.dealerStandsSoft17 === true){\r\n                console.log('the correct Play is HIT')\r\n                this.setState({\r\n                    correctPlay: 'HIT',\r\n                })\r\n            } else if (this.state.dealerStandsSoft17 === false){\r\n                if(this.state.surrenderAllowed === true){\r\n                    console.log('the correct Play is SURRENDER')\r\n                    this.setState({\r\n                        correctPlay: 'SURRENDER',\r\n                    })\r\n                } else if (this.state.surrenderAllowed === false){\r\n                    console.log('the correct Play is HIT')\r\n                    this.setState({\r\n                        correctPlay: 'HIT',\r\n                    })\r\n                } \r\n            }  \r\n        } else if (pHand === 16 && dHand <= 6){\r\n            console.log('the correct Play is STAND')\r\n            this.setState({\r\n                correctPlay: 'STAND',\r\n            })\r\n        } else if (pHand === 16 && dHand <= 8){\r\n            console.log('the correct Play is HIT')\r\n            this.setState({\r\n                correctPlay: 'HIT',\r\n            })\r\n        }  else if (pHand === 16 && dHand <= 11){\r\n            if(this.state.surrenderAllowed === true){\r\n                console.log('the correct Play is SURRENDER')\r\n                this.setState({\r\n                    correctPlay: 'SURRENDER',\r\n                })\r\n            } else if (this.state.surrenderAllowed === false){\r\n                console.log('the correct Play is HIT')\r\n                this.setState({\r\n                    correctPlay: 'HIT',\r\n                })\r\n            } \r\n        }\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return (\r\n            <CorrectPlayContext.Provider \r\n                value={{\r\n                    checkSplitHand: this.checkSplitHand,\r\n                    checkSoftHand: this.checkSoftHand,\r\n                    checkHardHand: this.checkHardHand,\r\n                    correctPlay: this.state.correctPlay,\r\n                    setCorrectPlayRules: this.setCorrectPlayRules,\r\n                    currentKindOfHandBeingPlayed: this.state.currentKindOfHandBeingPlayed,\r\n                    setCorrectHandsPlayed: this.setCorrectHandsPlayed,\r\n                    hardHandsPlayed: this.state.hardHandsPlayed,\r\n                    hardHandsCorrect: this.state.hardHandsCorrect,\r\n                    softHandsPlayed: this.state.softHandsPlayed,\r\n                    softHandsCorrect: this.state.softHandsCorrect,\r\n                    splitHandsPlayed: this.state.splitHandsPlayed,\r\n                    splitHandsCorrect: this.state.splitHandsCorrect,\r\n                    toggleBasicStrategyStats: this.toggleBasicStrategyStats,\r\n                    showBasicStrategyStats: this.state.showBasicStrategyStats,\r\n                }}>\r\n                { this.props.children }\r\n            </CorrectPlayContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CorrectPlayProvider\r\n\r\n\r\nexport const withCorrectPlay = C => props => (\r\n    <CorrectPlayContext.Consumer>\r\n        {value => <C {...props} {...value}/>}\r\n    </CorrectPlayContext.Consumer>\r\n)\r\n","import React from 'react';\r\nimport {withCorrectPlay} from '../../context/CorrectPlayProvider';\r\nimport './BasicStrategyStatsModal.css'\r\n\r\nconst BasicStrategyStatsModal = (props) => {\r\n\r\n    const show = props.showBasicStrategyStats\r\n\r\n    let totalAverageStats = ((props.hardHandsCorrect + props.softHandsCorrect + props.splitHandsCorrect) / \r\n                            (props.hardHandsPlayed + props.softHandsPlayed + props.splitHandsPlayed)*100 )\r\n    let totalPercentageCorrect = totalAverageStats.toFixed(1)\r\n    let hardPercentageCorrect = (((props.hardHandsCorrect / props.hardHandsPlayed) * 100).toFixed(1))\r\n    let softPercentageCorrect = (((props.softHandsCorrect / props.softHandsPlayed) * 100).toFixed(1))\r\n    let splitPercentageCorrect = (((props.splitHandsCorrect / props.splitHandsPlayed) * 100).toFixed(1))\r\n\r\n    let totalPercentageClass = ''\r\n    let hardPercentageClass = ''\r\n    let softPercentageClass = ''\r\n    let splitPercentageClass = ''\r\n\r\n    if(totalPercentageCorrect >= 90){\r\n        totalPercentageClass = 'good-percentage'\r\n    } else if(totalPercentageCorrect >= 70 && totalPercentageCorrect < 90){\r\n        totalPercentageClass = 'average-percentage'\r\n    } else{\r\n        totalPercentageClass = 'bad-percentage'\r\n    }\r\n\r\n    if(hardPercentageCorrect >= 90){\r\n        hardPercentageClass = 'good-percentage'\r\n    } else if(hardPercentageCorrect >= 70 && hardPercentageCorrect < 90){\r\n        hardPercentageClass = 'average-percentage'\r\n    } else{\r\n        hardPercentageClass = 'bad-percentage'\r\n    }\r\n\r\n    if(softPercentageCorrect >= 90){\r\n        softPercentageClass = 'good-percentage'\r\n    } else if(softPercentageCorrect >= 70 && softPercentageCorrect < 90){\r\n        softPercentageClass = 'average-percentage'\r\n    } else{\r\n        softPercentageClass = 'bad-percentage'\r\n    }\r\n\r\n    if(splitPercentageCorrect >= 90){\r\n        splitPercentageClass = 'good-percentage'\r\n    } else if(splitPercentageCorrect >= 70 && splitPercentageCorrect < 90){\r\n        splitPercentageClass = 'average-percentage'\r\n    } else{\r\n        splitPercentageClass = 'bad-percentage'\r\n    }\r\n\r\n    let modal = document.getElementById('simpleModal')\r\n    window.addEventListener('mousedown', clickOutsideStatsModal)\r\n    function clickOutsideStatsModal(e){\r\n        if(e.target === modal){\r\n            props.toggleBasicStrategyStats()\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div id=\"simpleModal\" className= {show ? 'modalShow' : 'modalHide'} >\r\n            <div id='my-modal-content' className=\"modal-content\">\r\n                <span className=\"closeBtn\" onClick={props.toggleBasicStrategyStats}>&times;</span>\r\n                <h2 className='modalSubTitle'> Current Player Stats </h2>\r\n                <div className='stats-wrapper'>\r\n                    <div className='first-stats'>\r\n                        <div>\r\n                            <h3>Cumulative:</h3>\r\n                            <h4>Played: {props.hardHandsPlayed + props.softHandsPlayed + props.splitHandsPlayed} </h4>\r\n                            <h4>Correct: {props.hardHandsCorrect + props.softHandsCorrect + props.splitHandsCorrect} </h4>\r\n                            <h4 className={totalPercentageClass}> Accuracy: { totalPercentageCorrect >= 0 ? totalPercentageCorrect : 0 }% \r\n                            </h4>\r\n                        </div>\r\n                        <div>\r\n                            <h3>Hard Hands:</h3>\r\n                            <h4>Played: {props.hardHandsPlayed} </h4>\r\n                            <h4>Correct: {props.hardHandsCorrect} </h4>\r\n                            <h4 className={hardPercentageClass}> Accuracy: {hardPercentageCorrect >=0 ? hardPercentageCorrect : 0 }% </h4>\r\n                        </div>\r\n                    </div>\r\n                    <div className='second-stats'>\r\n                        <div>\r\n                            <h3>Soft Hands:</h3>\r\n                            <h4>Played: {props.softHandsPlayed} </h4>\r\n                            <h4>Correct: {props.softHandsCorrect} </h4>\r\n                            <h4 className={softPercentageClass}> Accuracy: {softPercentageCorrect >=0 ? softPercentageCorrect : 0 }% </h4>\r\n                        </div>\r\n                        <div>\r\n                            <h3>Split Hands:</h3>\r\n                            <h4>Played: {props.splitHandsPlayed} </h4>\r\n                            <h4>Correct: {props.splitHandsCorrect} </h4>\r\n                            <h4 className={splitPercentageClass}> Accuracy: {splitPercentageCorrect >=0 ? splitPercentageCorrect : 0 }% </h4>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n                \r\n            </div>\r\n        </div>\r\n    )  \r\n}\r\n\r\nexport default withCorrectPlay(BasicStrategyStatsModal)\r\n","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport {withCorrectPlay} from './context/CorrectPlayProvider';\r\nimport BasicStrategyStatsModal from './components/BasicStrategyStatsModal/BasicStrategyStatsModal'\r\n\r\nclass TrainBasicStrategy extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            deckID: '',\r\n            dealerHand: '',\r\n            dealerImages: '',\r\n            playerCard1: '',\r\n            playerCard2: '',\r\n            playerImage1: '',\r\n            playerImage2: '',\r\n            playerCard1IsAce : false,\r\n            playerCard2IsAce : false,\r\n            pCard1Number: '',\r\n            pCard2Number: '',\r\n            dHand: '',\r\n            pHand: '',\r\n            options: ['HIT', 'STAND', 'DOUBLE', 'SPLIT', 'SURRENDER'],\r\n            playerGuess: '',\r\n            buttonList: '',\r\n            buttonClass: 'checkButton',\r\n            bottomMargin: '18px',\r\n            remainingCardsInDeck: 0,\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        axios.get('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=8').then(response => {\r\n            const deckID = response.data.deck_id;\r\n            this.setState({\r\n                deckID: deckID,\r\n            })\r\n        })\r\n    }\r\n\r\n    dealCard = () => {\r\n        axios.get(`https://deckofcardsapi.com/api/deck/${this.state.deckID}/draw/?count=3`).then(response => {\r\n            \r\n            const dealerCardValue = response.data.cards[0].value  \r\n            const playerCardValue1 = response.data.cards[1].value  \r\n            const playerCardValue2 = response.data.cards[2].value  \r\n            const dealerCardImage = response.data.cards[0].image\r\n            const playerCardImage1 = response.data.cards[1].image\r\n            const playerCardImage2 = response.data.cards[2].image\r\n            const hands = ['Hit', 'Stand', 'Double', 'Split', 'Surrender']\r\n            const options = hands.map(hand => <button className='checkButton' onClick={this.checkButton} id='notSelected' \r\n                            name={hand.toUpperCase()} value={hand.toUpperCase()} >{hand}</button>)\r\n\r\n            this.setState({\r\n                dealerHand: dealerCardValue,\r\n                dealerImages: dealerCardImage,\r\n                playerCard1: playerCardValue1, \r\n                playerCard2: playerCardValue2,\r\n                playerImage1: playerCardImage1, \r\n                playerImage2: playerCardImage2,\r\n                remainingCardsInDeck: response.data.remaining,\r\n                buttonList: options\r\n            }, () => this.showCardData() )\r\n        })\r\n    }\r\n\r\n    showCardData = () => {\r\n        if(this.state.remainingCardsInDeck <= 5){\r\n            axios.get(`https://deckofcardsapi.com/api/deck/${this.state.deckID}/shuffle/`).then(response => {\r\n            })\r\n        }\r\n        const dCard = this.state.dealerHand;\r\n        let dCardNumber = 0\r\n        const pCard1 = this.state.playerCard1;\r\n        let pCard1Number = 0\r\n        const pCard2 = this.state.playerCard2;\r\n        let pCard2Number = 0\r\n\r\n        //  Sets the proper numberical values to dealer hand for future evaluation\r\n        if (dCard === 'JACK' ||dCard === 'QUEEN' || dCard === 'KING' ){\r\n            dCardNumber  = 10\r\n            this.setState({\r\n                dHand: dCardNumber\r\n            })\r\n        } else if (dCard === 'ACE') {\r\n            dCardNumber  = 11\r\n            this.setState({\r\n                dhand: dCardNumber\r\n            })\r\n        } else {\r\n            dCardNumber  = dCard\r\n            this.setState({\r\n                dhand: dCardNumber\r\n            })\r\n        }\r\n\r\n        //  Sets the proper numberical values to player card 1 for future evaluation\r\n        if (pCard1 === 'JACK' ||pCard1 === 'QUEEN' || pCard1 === 'KING' ){\r\n            pCard1Number  = 10\r\n        } else if (pCard1 === 'ACE' ) {\r\n            pCard1Number  = 11\r\n            this.setState({\r\n                playerCard1IsAce: true,\r\n            })\r\n        } else {\r\n            pCard1Number = pCard1 \r\n        }\r\n\r\n        //  Sets the proper numerical values to player card 2 for future evaluation\r\n        if (pCard2 === 'JACK' ||pCard2 === 'QUEEN' || pCard2 === 'KING' ){\r\n            pCard2Number  = 10\r\n        } else if (pCard2 === 'ACE' ) {\r\n            pCard2Number  = 11\r\n            this.setState({\r\n                playerCard2IsAce: true,\r\n            })\r\n        } else {\r\n            pCard2Number = pCard2 \r\n        }\r\n\r\n        //  Sums the 2 player cards into 1 hand value\r\n        const pHand = parseInt(pCard1Number) +  parseInt(pCard2Number)\r\n        const dHand = dCardNumber\r\n\r\n        //  Sets state of values parsed above for other functions to access.\r\n        this.setState({\r\n            pHand: pHand,\r\n            dHand: dHand,\r\n            pCard1Number: pCard1Number,\r\n            pCard2Number: pCard2Number,\r\n        }, () => this.whatCheckHandFunctionToRun() )\r\n    }\r\n\r\n    whatCheckHandFunctionToRun = () => {\r\n        const pCard1Number = parseInt(this.state.pCard1Number)\r\n        const pCard2Number = parseInt(this.state.pCard2Number)\r\n    \r\n        let dealerHand = parseInt(this.state.dHand)\r\n        let playerHand = parseInt(this.state.pHand)\r\n\r\n        if (pCard1Number === pCard2Number ){\r\n            this.props.checkSplitHand(dealerHand, playerHand)\r\n        } else if (pCard1Number === 11 || pCard2Number === 11){\r\n            this.props.checkSoftHand(dealerHand, playerHand)\r\n        } else {\r\n            this.props.checkHardHand(dealerHand, playerHand)\r\n        }\r\n    }\r\n\r\n    checkButton = (e) => {\r\n        const answer = this.props.correctPlay\r\n        const guess = e.target.value\r\n        const hands = ['Hit', 'Stand', 'Double', 'Split', 'Surrender']\r\n        const buttons = hands.map(hand => {\r\n            if(guess === answer && hand.toUpperCase() === answer){\r\n                this.sendUpdatedPlayerStatsToProvider(true)\r\n                return (\r\n                    <button className='checkButton' onClick={this.checkButton} id='correct' name={hand.toUpperCase()} value={hand.toUpperCase()} >{hand}</button>\r\n                )\r\n            }else if (hand.toUpperCase() === answer){\r\n                this.sendUpdatedPlayerStatsToProvider(false)\r\n                return (\r\n                    <button className='checkButton' onClick={this.checkButton} id='correct' name={hand.toUpperCase()} value={hand.toUpperCase()} >{hand}</button>\r\n                )\r\n            }else if(guess === hand.toUpperCase()) {\r\n                return (\r\n                    <button className='checkButton' onClick={this.checkButton} id='wrong' name={hand.toUpperCase()} value={hand.toUpperCase()} >{hand}</button>\r\n                )\r\n            }else {\r\n                return (\r\n                    <button className='checkButton' onClick={this.checkButton} id='notSelected' name={hand.toUpperCase()} value={hand.toUpperCase()} >{hand}</button>\r\n                )\r\n            }\r\n        })\r\n\r\n        this.setState({buttonList: buttons, buttonClass: 'checkButtonOff', bottomMargin: '0px'})\r\n    }\r\n\r\n    sendUpdatedPlayerStatsToProvider = (playerWasCorrect) => {\r\n        let currentHandType = this.props.currentKindOfHandBeingPlayed\r\n        this.props.setCorrectHandsPlayed(playerWasCorrect, currentHandType)\r\n    }\r\n\r\n    checkStats = () => {\r\n        this.props.toggleBasicStrategyStats()\r\n    }\r\n\r\n    handleRulesCheckbox = (e) => {\r\n        let name = e.target.name\r\n        let checked = e.target.checked\r\n        this.props.setCorrectPlayRules(name, checked)\r\n    }\r\n\r\n    render() {\r\n        return ( \r\n            <div className='trainingWrapper'>\r\n                <div className='container'>\r\n                <h1 className='trainDrillSubtitle'>Basic Strategy Drill</h1>\r\n                <h4 className='casino-rules-heading'>Choose your Casino Rules:</h4>\r\n                <form onChange={this.handleRulesCheckbox} className='casino-rules-form'>\r\n                    <input  className='rules-checkbox' \r\n                            name='dealerStandsSoft17' \r\n                            type='checkbox'>\r\n                    </input> Dealer stand's on soft 17\r\n                    <br></br>\r\n                    <input  className='rules-checkbox'\r\n                            name='doubleAllowed' \r\n                            type='checkbox'>\r\n                    </input>  Double allowed\r\n                    <br></br>\r\n                    <input  className='rules-checkbox'\r\n                            name='doubleAfterSplitAllowed' \r\n                            type='checkbox'>\r\n                    </input>  Double after split allowed\r\n                    <br></br>\r\n                    <input  className='rules-checkbox' \r\n                            name='surrenderAllowed' \r\n                            type='checkbox'>\r\n                    </input>  Surrender allowed\r\n                    <br></br>\r\n                </form>\r\n                <h3 className='handDescription'>Dealer Hand</h3>\r\n                \r\n                    <div className='dealerHandBS'>\r\n                        <img className='cardBS' src={this.state.dealerImages} alt=''></img>\r\n                    </div>\r\n\r\n                    <div className='playerHandBS'>\r\n                        <img  className='cardBS' src={this.state.playerImage1} alt=''></img>\r\n                        <img  className='cardBS' src={this.state.playerImage2} alt=''></img>\r\n                    </div>\r\n\r\n                    <h3 className='handDescription'>Player Hand</h3>\r\n                    <div className='basicStrategyButtonWrapper'>\r\n                        <h2 style={{marginBottom: this.state.bottomMargin}}>Choose the correct play:</h2>\r\n                        <button className={this.state.buttonClass} onClick={this.checkButton} id='buttonHit' name='HIT' value='HIT' >Hit</button>\r\n                        <button className={this.state.buttonClass} onClick={this.checkButton} id='buttonStand' name='STAND' value='STAND' >Stand</button>\r\n                        <button className={this.state.buttonClass} onClick={this.checkButton} id='buttonDouble' name='DOUBLE' value='DOUBLE' >Double</button>\r\n                        <button className={this.state.buttonClass} onClick={this.checkButton} id='buttonSplit' name='SPLIT' value='SPLIT' >Split</button>\r\n                        <button className={this.state.buttonClass} onClick={this.checkButton} id='buttonSurrender' name='SURRENDER' value='SURRENDER' >Surrender</button> <br></br>\r\n                        {this.state.buttonList}\r\n                        <button className='dealBSButton' onClick={this.dealCard}>Deal</button>\r\n                        <button className='check-stats-button' onClick={this.checkStats}>Check Stats</button>\r\n                    </div>\r\n                    <BasicStrategyStatsModal />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withCorrectPlay(TrainBasicStrategy)","import React, {Component} from 'react'\r\nimport axios from 'axios'\r\n\r\nclass TrainSelfPacedCount extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            deckID: '',\r\n            cardsDealt: [],\r\n            cardsDealtImages: 'none',\r\n            cardsDealtValues: [],\r\n            currentCardValue: 0,\r\n            count: 0,\r\n            runningCountVisible: false,\r\n            remainingCardsInDeck: 10\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios.get('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1').then(response => {\r\n            const deckID = response.data.deck_id;\r\n            this.setState({\r\n                deckID: deckID,\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    dealCard = () => {\r\n        axios.get(`https://deckofcardsapi.com/api/deck/${this.state.deckID}/draw/?count=1`).then(response => {\r\n            const oneCardDealt = response.data.cards[0].code;\r\n            const cardImage = response.data.cards[0].image\r\n            const cardValue = response.data.cards[0].value\r\n            const remaining = response.data.remaining\r\n            this.setState(prevState => {\r\n            return {\r\n                cardsDealt: [...prevState.cardsDealt, oneCardDealt],\r\n                cardsDealtImages: cardImage,\r\n                cardsDealtValues: [...prevState.cardsDealtValues, cardValue],\r\n                currentCardValue: cardValue,\r\n                remainingCardsInDeck: remaining\r\n            }\r\n            //  Once state is set from the new card, re-run the player hand total functions\r\n            }, () => this.whatsTheCount() )\r\n        })\r\n    }\r\n\r\n    whatsTheCount = () => {\r\n        if(this.state.remainingCardsInDeck <= 1){\r\n            axios.get(`https://deckofcardsapi.com/api/deck/${this.state.deckID}/shuffle/`).then(response => {\r\n            })\r\n        }\r\n        //  if card value is 10 or greater, count is subtracted by 1\r\n        if (this.state.currentCardValue === '10' || this.state.currentCardValue === 'JACK' || this.state.currentCardValue === 'QUEEN' || this.state.currentCardValue === 'KING' || this.state.currentCardValue === 'ACE'){\r\n            this.setState(prevState => {\r\n                return{\r\n                    count: prevState.count -1\r\n                }\r\n            })\r\n        //  if card value is 6 or less, count is added by 1\r\n        } else if(this.state.currentCardValue < 7){\r\n            this.setState(prevState => {\r\n                return{\r\n                    count: prevState.count +1\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    hideShowRunningCount = () => {\r\n        if (this.state.runningCountVisible){\r\n            this.setState({\r\n                runningCountVisible: false\r\n            }); \r\n        } else {\r\n            this.setState({\r\n                runningCountVisible: true\r\n            })\r\n        }\r\n    }\r\n\r\n    hideShowCountDiv = () => {\r\n        if (this.state.runningCountVisible) {\r\n            return <span>Click To Show Running Count</span>\r\n        } else {\r\n            return <span>Click To Hide Running Count</span>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return ( \r\n            <div className='trainingWrapper'>\r\n                <div className='container'>\r\n                    <h1 className='trainDrillSubtitle'>Self Paced Count Drill</h1>\r\n                    <div className='deckDisplay'>\r\n                        <img src={this.state.cardsDealtImages} alt='Card Displayed Here'></img>\r\n                    </div>\r\n                    <button className='checkButton' onClick={this.dealCard}>Deal Card</button>\r\n                    <h2 onClick={this.hideShowRunningCount} className='toggleCount'>{this.hideShowCountDiv()} </h2>\r\n                    <h2 className={this.state.runningCountVisible ? 'hideCountDiv' : 'showCountDiv' }> Running Count: {this.state.count}</h2>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrainSelfPacedCount","import React, {Component} from 'react'\r\nimport axios from 'axios'\r\n\r\nclass TrainSpeedCount extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            deckID: '',\r\n            cardsDealt: [],\r\n            cardsDealtImages: 'none',\r\n            cardsDealtValues: [],\r\n            currentCardValue: 0,\r\n            count: 0,\r\n            runningCountVisible: false,\r\n            whatsTheCountVisible: false,\r\n            cardsPerSecond: 1,\r\n            howFast: 1000,\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios.get('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=8').then(response => {\r\n            const deckID = response.data.deck_id;\r\n            this.setState({\r\n                deckID: deckID,\r\n            })\r\n        })\r\n    }\r\n\r\n    dealCard = () => {\r\n        this.setState({\r\n            runningCountVisible: false,\r\n            whatsTheCountVisible: false, \r\n        })\r\n        const speed = this.state.howFast\r\n        const timerId = setInterval(()=>{\r\n            axios.get(`https://deckofcardsapi.com/api/deck/${this.state.deckID}/draw/?count=1`).then(response => {\r\n                const oneCardDealt = response.data.cards[0].code;\r\n                const cardImage = response.data.cards[0].image\r\n                const cardValue = response.data.cards[0].value\r\n                this.setState(prevState => {\r\n                    return {\r\n                    cardsDealt: [...prevState.cardsDealt, oneCardDealt],\r\n                    cardsDealtImages: cardImage,\r\n                    cardsDealtValues: [...prevState.cardsDealtValues, cardValue],\r\n                    currentCardValue: cardValue,\r\n                }\r\n                //  Once state is set from the new card, re-run the player hand total functions\r\n                }, () => this.whatsTheCount() )\r\n            })\r\n        },speed)\r\n        setTimeout( ()=> { \r\n            clearInterval(timerId)\r\n            this.countIsFinished()\r\n        }, 30000)  \r\n    }\r\n    \r\n    whatsTheCount = () => {\r\n        //  if card value is 10 or greater, count is subtracted by 1\r\n        if (this.state.currentCardValue === '10' || this.state.currentCardValue === 'JACK' || this.state.currentCardValue === 'QUEEN' || this.state.currentCardValue === 'KING' || this.state.currentCardValue === 'ACE'){\r\n            this.setState(prevState => {\r\n                return{\r\n                    count: prevState.count -1\r\n                }\r\n            })\r\n        //  if card value is 6 or less, count is added by 1\r\n        } else if(this.state.currentCardValue < 7){\r\n            this.setState(prevState => {\r\n                return{\r\n                    count: prevState.count +1\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    countIsFinished = () => {\r\n        setTimeout ( () => {\r\n            this.setState({\r\n                cardsDealtImages: null,\r\n                whatsTheCountVisible: true \r\n            }) \r\n        }, 1000)\r\n        this.displayCount()    \r\n    }\r\n\r\n    displayCount = () => {\r\n        setTimeout ( () => {\r\n            this.setState({\r\n                runningCountVisible: true,\r\n            }) \r\n        }, 3000)  \r\n    }\r\n    \r\n    handleChange = event => {\r\n        this.setState({ \r\n            [event.target.name]: event.target.value,\r\n            runningCountVisible: false\r\n        }, () => {\r\n            this.setState({\r\n                howFast: (1000 / this.state.cardsPerSecond),\r\n            })\r\n            \r\n        }, () => console.log(this.state.cardsPerSecond) ) \r\n    }\r\n\r\n    render() {\r\n        return ( \r\n            <div className='trainingWrapper'>\r\n                <div className='container'>\r\n                    <h1 className='trainDrillSubtitle'>Speed Count Drill</h1>\r\n                    <form className='speedCountForm'>\r\n                        <span className='cardsPerSecondSpan'>Cards Per Second:</span> \r\n                        <input  className='cardsPerSecondInput' \r\n                                name='cardsPerSecond' \r\n                                type='number' \r\n                                value={this.state.cardsPerSecond} \r\n                                placeholder='Cards Per Second' \r\n                                onChange={this.handleChange}>\r\n                        </input>\r\n                    </form>\r\n                    <div className='deckDisplay'>\r\n                        <img src={this.state.cardsDealtImages} alt=''></img>\r\n                        <h1 className={this.state.whatsTheCountVisible ? 'showCountDiv' : 'hideCountDiv' }>Whats The Count?</h1>\r\n                        <br></br>\r\n                        <h1 className={this.state.runningCountVisible ? 'showCountDiv' : 'hideCountDiv' }>{this.state.count}</h1>\r\n                    </div>\r\n                    <button className='checkButton' onClick={this.dealCard}>Start</button>\r\n                    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrainSpeedCount","import React, {Component} from 'react'\r\n\r\nclass TrainRunningCountSpeedCount extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            randomDeck: 2,\r\n            randomCount: 2,\r\n            guess: 1,\r\n            answer: 1,\r\n            wereTheyRight: true\r\n        }\r\n    }\r\n\r\n    clickNew = () => {\r\n        console.log('guess is : ' + this.state.guess)\r\n        // this.setState({\r\n        //     wereTheyRight: true\r\n        // })\r\n        this.generateNumbers()\r\n    }\r\n    generateNumbers = () => {\r\n        const decksLeftArray = [1,2,3,4,5,6,7,8];\r\n        let randomDeck = decksLeftArray[Math.floor(Math.random()*decksLeftArray.length)]\r\n        const countArray = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\r\n        let randomCount = countArray[Math.floor(Math.random()*countArray.length)]\r\n        this.setState({\r\n            randomDeck: randomDeck,\r\n            randomCount: randomCount\r\n        })\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({ \r\n            [event.target.name]: event.target.value,  \r\n        }) \r\n    }\r\n\r\n    clickCheck = () => {\r\n        console.log('check was clicked')\r\n        const deck = this.state.randomDeck;\r\n        const count = this.state.randomCount;\r\n        const correctAnswer = (Math.round( count / deck));\r\n        this.setState({\r\n            answer: correctAnswer,\r\n        }, () => this.checkAnswer() )\r\n    }\r\n\r\n    checkAnswer = () => {\r\n        let guessNumber = parseInt(this.state.guess)\r\n        if (this.state.answer === guessNumber){\r\n            this.setState({\r\n                wereTheyRight: true,\r\n            })\r\n            return <h2>Correct!</h2>\r\n        } else{\r\n            this.setState({\r\n                wereTheyRight: false\r\n            })\r\n            return <h2> answered wrong</h2>\r\n        }\r\n    }\r\n    \r\n\r\n    render() {\r\n        return ( \r\n            <div className='trainingWrapper'>\r\n                <div className='container'>\r\n                    <h1 className='trainDrillSubtitle'>Convert to True Count Drill</h1>\r\n                    <h2 className='subTitle'>Running Count is: {this.state.randomCount} </h2>\r\n                    <h2 className='subTitle'>Decks Left: {this.state.randomDeck}</h2>\r\n                    <h2 className='subTitleMargin'>What's the true count? (round) </h2>\r\n                    <form className='runningCountTrueCountForm'>\r\n                        <input  className='runCountTrueCountInput' \r\n                                type='number' \r\n                                name='guess' \r\n                                value={this.state.guess} \r\n                                onChange={this.handleChange} \r\n                                placeholder='Enter True Count' >\r\n                        </input>\r\n                        <br></br>\r\n                    </form>\r\n                    <button className='checkButton' onClick={this.clickNew}>New</button>\r\n                    <button className='checkButton' onClick={this.clickCheck}>Check</button>\r\n                    <h1 className={this.state.wereTheyRight ? 'showCountDiv' : 'hideCountDiv' }>Correct!</h1>\r\n                    <h1 className={this.state.wereTheyRight ? 'hideCountDiv' : 'showCountDiv' }>The Answer Was: {this.state.answer}</h1>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrainRunningCountSpeedCount","import React, {Component} from 'react';\r\n\r\n\r\nclass TrainBetSizing extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            randomCount: 0,\r\n            output: 'How Smart Are You???',\r\n        }\r\n    }\r\n\r\n    generateRandomCount = () => {\r\n        const betCountArray = [0,1,2,3,4,]\r\n        let randomCount = betCountArray[Math.floor(Math.random()*betCountArray.length)]\r\n        this.setState({\r\n            randomCount: randomCount,\r\n        })\r\n    }\r\n\r\n    checkAnswer = event => {\r\n        let answerString = event.target.value;\r\n        let answer = parseInt(answerString)\r\n        let count = this.state.randomCount\r\n\r\n        if (answer === 1 && count === 0 ){\r\n            this.displayOutputCorrect()\r\n        } else if (answer === 2 && count === 1 ){\r\n            this.displayOutputCorrect()\r\n        } else if (answer === 4 && count === 2 ){\r\n            this.displayOutputCorrect()\r\n        } else if (answer === 8 && count === 3 ){\r\n            this.displayOutputCorrect()\r\n        } else if (answer === 16 && count === 4 ){\r\n            this.displayOutputCorrect()\r\n        } else{\r\n            this.displayOutputIncorrect()\r\n        }\r\n        this.generateRandomCount()\r\n    }\r\n\r\n    displayOutputCorrect = () => {\r\n        this.setState({\r\n            output: 'Correct!'\r\n        })\r\n    }\r\n\r\n    displayOutputIncorrect = () => {\r\n        this.setState({\r\n            output: 'Try Again... :( '\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return ( \r\n            <div className='trainingWrapper'>\r\n                <div className='container'>\r\n                    <h1 className='trainDrillSubtitle'>Proper Bet Sizing Drill</h1>\r\n                    <h2 className='subTitle'>Your minumum bet size is 1 unit.</h2>\r\n                    <h2 className='subTitleMargin'>Select the correct betting unit size based on the true count:</h2>\r\n                    <h2 className='subTitle'>True count is: {this.state.randomCount} </h2>\r\n                    <h2 className='subTitleMargin'>Your bet should be: </h2>\r\n                    <div className = 'betButtonContainer'>\r\n                        <button onClick={this.checkAnswer} value='1' className='checkButton'>1x</button>\r\n                        <button onClick={this.checkAnswer} value='2' className='checkButton'>2x</button>\r\n                        <button onClick={this.checkAnswer} value='4' className='checkButton'>4x</button>\r\n                        <button onClick={this.checkAnswer} value='8' className='checkButton'>8x</button> <br></br>\r\n                        <button onClick={this.checkAnswer} value='16' className='checkButtonBig'>2 hands of 8x</button>\r\n                    </div>\r\n                    <h2> {this.state.output} </h2>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrainBetSizing","import React, { Component } from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport axios from 'axios'\r\nimport Navbar from './components/Navbar'\r\nimport Home from './components/Home'\r\nimport Play from './Play'\r\nimport Learn from './Learn'\r\nimport Train from './Train'\r\nimport TrainBasicStrategy from './TrainBasicStrategy'\r\nimport TrainSelfPacedCount from './TrainSelfPacedCount'\r\nimport TrainSpeedCount from './TrainSpeedCount'\r\nimport TrainRunningCountTrueCount from './TrainRunningCountTrueCount'\r\nimport TrainBetSizing from './TrainBetSizing'\r\n\r\n//  Neded to shuffle deck\r\n//  need to choose play rules:\r\n    // number of decks\r\n    // hit or stand on soft 17\r\n    // Cut point\r\n    // surrender \r\n\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      deckCount: 6,\r\n      deckID: '',\r\n      cardsDealt: 0,\r\n      decksPlayed: 0,\r\n      remainingCards: 0,\r\n      remainingDecks: 0,\r\n      trueCount: 0,\r\n      dealerHand: [],\r\n      dealerHandValues: [],\r\n      dealerHandTotal: '',\r\n      dealerHandImages: [],\r\n      playerHand: [],\r\n      playerHand2: [],\r\n      playerHandValues: [],\r\n      playerHandValues2: [],\r\n      playerNumericalHandValues: [],\r\n      playerNumericalHandValues2: [],\r\n      dealerHandTotalPreAces: '',\r\n      dealerHandTotalPostAces: '',\r\n      playerHandTotalPreAces: '',\r\n      playerHandTotal2PreAces: '',\r\n      playerHandTotalPostAces: '',\r\n      playerHandTotal2PostAces: '',\r\n      playerHandImages: [],\r\n      playerHandImages2: [],\r\n      dealtCard: '',\r\n      playerHasAce: false,\r\n      dealerHasAce: false,\r\n      playerClickedStand: false,\r\n      playerClickedDouble: false,\r\n      playerClickedSplit: false,\r\n      playerBet: 0,\r\n      playerDoubleBet: 0,\r\n      playerBankroll: 15000,\r\n      dealerWins: false,\r\n      playerWins: false,\r\n      playerBust: false,\r\n      playerBust2: false,\r\n      dealerBust: false,\r\n      count: 0,\r\n      countArray: [],\r\n      countArrayValues: [],\r\n      playerBaseBet: 50,\r\n      showCountDiv: false,\r\n      showAdviceDiv: false,\r\n      playerAdvantage: '',\r\n      dealerCardFaceShowing: false,\r\n      dealerCardBackShowing: false,\r\n    }\r\n  }\r\n \r\n  componentDidMount(){\r\n    axios.get(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=${this.state.deckCount}`).then(response => {\r\n      const deckID = response.data.deck_id;\r\n      this.setState({\r\n        deckID: deckID,\r\n      })\r\n    })\r\n  }\r\n\r\n  dealHand = (e) => {\r\n    e.preventDefault();\r\n    // console.log('Player bet is ' + this.state.playerBet)\r\n    axios.get(`https://deckofcardsapi.com/api/deck/${this.state.deckID}/draw/?count=3`).then(response => {\r\n      const dealtCards = response.data.cards;\r\n      const remainingCards = response.data.remaining\r\n      dealtCards.forEach(pickACard => {\r\n        let card = pickACard.code\r\n        let cardImage = pickACard.image\r\n        let cardValue = pickACard.value\r\n        if (this.state.playerHand.length <= this.state.dealerHand.length){\r\n          this.setState(prevState => {\r\n            return {\r\n              playerHand: [...prevState.playerHand, card],\r\n              playerHandImages: [...prevState.playerHandImages, cardImage],\r\n              playerHandValues: [...prevState.playerHandValues, cardValue],\r\n              countArray: [...prevState.countArray, cardValue],\r\n              cardsDealt: prevState.cardsDealt + 1,\r\n              decksPlayed: ((this.state.cardsDealt / 52).toFixed(2) ),\r\n              remainingDecks: ( (this.state.deckCount - this.state.decksPlayed).toFixed(2) ),\r\n              trueCount: ((this.state.count / this.state.remainingDecks).toFixed(1)),\r\n              playerAdvantage: ( (-0.5 + (this.state.trueCount * 0.5)).toFixed(2) ),\r\n            }\r\n          })\r\n        } else {\r\n          this.setState(prevState => {\r\n            return {\r\n              dealerHand: [...prevState.dealerHand, card],\r\n              dealerHandImages: [...prevState.dealerHandImages, cardImage],\r\n              dealerHandValues: [...prevState.dealerHandValues, cardValue],\r\n              countArray: [...prevState.countArray, cardValue],\r\n              cardsDealt: prevState.cardsDealt + 1,\r\n              decksPlayed: ((this.state.cardsDealt / 52).toFixed(2) ),\r\n              remainingDecks: ( (this.state.deckCount - this.state.decksPlayed).toFixed(2) ),\r\n              trueCount: ((this.state.count / this.state.remainingDecks).toFixed(1)),\r\n              playerAdvantage: ( (-0.5 + (this.state.trueCount * 0.5)).toFixed(2) ),\r\n              dealerCardBackShowing: true\r\n            }\r\n          })\r\n        }\r\n      });\r\n      this.setState({\r\n        remainingCards: remainingCards\r\n      })\r\n      this.countDealerTotal()\r\n      this.countPlayerTotal()\r\n      this.whatsTheCountGame()\r\n    })\r\n  }\r\n\r\n  //  Check if the dealer or player got a blackjack on the first 2 card\r\ninitialBlackjack = () => {\r\n  console.log('checking for begining of game blackjacks')\r\n  //  if both player and deal start with 21, it is a push.\r\n  \r\n  if (this.state.dealerHandTotalPostAces === 21 &&  this.state.playerHandTotalPostAces === 21){\r\n    //console.log('PUSH');\r\n    this.checkWhoWon();\r\n  //  if dealer starts with 21 and player does not, player looses\r\n  } else if (this.state.dealerHandTotalPostAces === 21){\r\n    //console.log('Dealer has Blackjack.  Player looses.');\r\n    this.checkWhoWon();\r\n  //  if player starts with 21 and dealer does not, player wins.\r\n  } else if (this.state.playerHandTotalPostAces === 21){\r\n    //console.log('Player has Blackjack.  Winner Winner Chicken Dinner!');\r\n    //  increase bankroll by bet amount + 50%\r\n    this.setState(prevState => {\r\n      return {\r\n        playerBankroll: prevState.playerBankroll + (this.state.playerBet * 1.5)\r\n      }}, () => setTimeout(this.resetHand, 2000));\r\n  }\r\n}\r\n\r\n //  Counts the dealers hand total with aces being valued at 1\r\n  countDealerTotal = () => {\r\n    console.log('Count Dealer Total ran')\r\n    const hand = this.state.dealerHandValues\r\n    const numericalHand = [];\r\n    hand.forEach(value => {\r\n      if (value === 'JACK' ||value === 'QUEEN' || value === 'KING' ){\r\n        value = 10\r\n       numericalHand.push(value)\r\n  \r\n      } else if (value === 'ACE'){\r\n          value = 1\r\n          numericalHand.push(value);\r\n    \r\n          this.setState({\r\n            dealerHasAce: true\r\n          })\r\n      } else {\r\n        const stringToNumberValue = parseInt(value)\r\n        numericalHand.push(stringToNumberValue)\r\n  \r\n      } })\r\n    const reducer = (accumulator, currentValue) => accumulator + currentValue;\r\n    let dealerHandTotal = numericalHand.reduce(reducer);\r\n    //  Sets the state for the count of dealer hand with aces only being worth 1\r\n    this.setState(() => ({\r\n      dealerHandTotalPreAces: dealerHandTotal \r\n    }), () => this.adjustDealerCountWithAces() );\r\n  }\r\n\r\n  //  Function that adjusts the dealer total to refelct aces being either 1 or 11\r\n  adjustDealerCountWithAces = () => {\r\n    console.log('Function for Dealer adjust for aces count ran')\r\n\r\n    let dealerTotalPreAces = this.state.dealerHandTotalPreAces\r\n    if (this.state.dealerHasAce === true && dealerTotalPreAces <= 11){\r\n      let finalDealerTotal = dealerTotalPreAces + 10;\r\n      this.setState(() => ({\r\n        dealerHandTotalPostAces: finalDealerTotal \r\n      }), () =>  this.didDealerBust() )\r\n    } else {\r\n      this.setState(() => ({\r\n        dealerHandTotalPostAces: dealerTotalPreAces \r\n      }), () =>  this.didDealerBust() \r\n      )\r\n    }\r\n  }\r\n  \r\n//  Counts the players hand total with aces being valued at 1\r\n  countPlayerTotal = () => {\r\n    console.log('count player total function ran');\r\n    const hand = this.state.playerHandValues\r\n    const hand2 = this.state.playerHandValues2\r\n    console.log('player hand 1 is ' + hand)\r\n    console.log('player hand 2 is ' + hand2)\r\n    const numericalHand = [];\r\n    hand.forEach(value => {\r\n      if (value === 'JACK' ||value === 'QUEEN' || value === 'KING' ){\r\n        value = 10\r\n        numericalHand.push(value)\r\n        this.state.playerNumericalHandValues.push(value)\r\n  \r\n      } else if (value === 'ACE'){\r\n          value = 1\r\n          numericalHand.push(value);\r\n          this.state.playerNumericalHandValues.push(value)\r\n    \r\n          this.setState({\r\n            playerHasAce: true\r\n          })\r\n      } else {\r\n        const stringToNumberValue = parseInt(value)\r\n        numericalHand.push(stringToNumberValue)\r\n        this.state.playerNumericalHandValues.push(stringToNumberValue)\r\n  \r\n      } })\r\n    const reducer = (accumulator, currentValue) => accumulator + currentValue;\r\n    let playerHandTotal = numericalHand.reduce(reducer);  \r\n    //  Sets the state for the count of that player hand with aces only being worth 1\r\n    this.setState(() => ({\r\n      playerHandTotalPreAces: playerHandTotal\r\n    }), () => this.adjustPlayerCountWithAces() );\r\n  }\r\n\r\n//  Function adjusts the players total to refelct aces being either 1 or 11\r\n  adjustPlayerCountWithAces = () => {\r\n    console.log('adjust player count with aces function ran')\r\n    let playerTotalPreAces = this.state.playerHandTotalPreAces  \r\n    if (this.state.playerHasAce === true && playerTotalPreAces <= 11){\r\n      let finalPlayerTotal = playerTotalPreAces + 10;\r\n      this.setState(() => ({\r\n        playerHandTotalPostAces: finalPlayerTotal \r\n      }), () =>  this.didPlayerBust() )\r\n    } else {\r\n      this.setState(() => ({\r\n        playerHandTotalPostAces: playerTotalPreAces \r\n      }), () =>  this.didPlayerBust() )\r\n    }\r\n  }\r\n\r\n  \r\n\r\n //  Deal card to player when they choose to hit\r\n dealOneCard = () => {\r\n  axios.get(`https://deckofcardsapi.com/api/deck/${this.state.deckID}/draw/?count=1`).then(response => {\r\n    const oneCardDealt = response.data.cards[0].code;\r\n    const remainingCards = response.data.remaining;\r\n    const cardImage = response.data.cards[0].image\r\n    const cardValue = response.data.cards[0].value\r\n\r\n    this.setState(prevState => {\r\n      return {\r\n        playerHand: [...prevState.playerHand, oneCardDealt],\r\n        playerHandImages: [...prevState.playerHandImages, cardImage],\r\n        playerHandValues: [...prevState.playerHandValues, cardValue],\r\n        countArray: [...prevState.countArray, cardValue],\r\n        cardsDealt: prevState.cardsDealt + 1,\r\n        decksPlayed: ((this.state.cardsDealt / 52).toFixed(2) ),\r\n        remainingCards: remainingCards,\r\n        remainingDecks: ( (this.state.deckCount - this.state.decksPlayed).toFixed(2) ),\r\n        trueCount: ((this.state.count / this.state.remainingDecks).toFixed(1)),\r\n        playerAdvantage: ( (-0.5 + (this.state.trueCount * 0.5)).toFixed(2) ),\r\n      }\r\n      //  Once state is set from the new card, re-run the player hand total functions\r\n    }, () => this.countPlayerTotal()) \r\n    this.whatsTheCountGame()\r\n  })\r\n  \r\n}\r\n\r\n//  Checks to see if the player went over 21\r\n  didPlayerBust = () => {\r\n    console.log('did player bust function ran')\r\n\r\n    //  Check if both the dealer and player only have 2 cards.  if so, we need to check for initial blackjacks.\r\n    if (this.state.dealerHand.length === 2 && this.state.playerHand.length === 2){\r\n      this.initialBlackjack()\r\n    }\r\n    //  Player Busts.  Hands Reset\r\n    else if (this.state.playerHandTotalPostAces > 21){\r\n      //console.log('player busted.  you loose')\r\n      this.setState(prevState => {\r\n        return {\r\n          playerBust: true,\r\n          playerBankroll: prevState.playerBankroll - this.state.playerBet\r\n        }}, () => setTimeout(this.resetHand, 3000));\r\n      // Player chose to sand and didnt bust, check for game winner\r\n    } else if (this.state.playerClickedStand === true){\r\n      this.playerStands()\r\n    } else if( this.state.playerClickedDouble === true ){\r\n      this.playerStands()\r\n    }\r\n  }\r\n\r\n  didDealerBust = () => {\r\n    console.log('did dealer bust function ran');\r\n    //  Dealer Busts.  Hands Reset.  Player Wins\r\n    if (this.state.dealerHandTotalPostAces > 21){\r\n      //  Increase player bankroll by bet amount\r\n      this.setState(prevState => {\r\n        return {\r\n          dealerBust: true,\r\n          playerBankroll: prevState.playerBankroll + this.state.playerBet\r\n        }}, () => setTimeout(this.resetHand, 3000));\r\n    } else if (this.state.playerClickedStand === true){\r\n      this.playerStands()\r\n    }\r\n  }\r\n\r\n  resetHand = () => {\r\n    console.log('reset hand function ran')\r\n      this.setState({\r\n          dealerHand: [],\r\n          dealerHandValues: [],\r\n          dealerHandTotal: '',\r\n          dealerHandImages: [],\r\n          playerHand: [],\r\n          playerHand2: [],\r\n          playerHandValues: [],\r\n          playerHandValues2: [],\r\n          playerNumericalHandValues: [],\r\n          playerNumericalHandValues2: [],\r\n          playerHandTotal: '',\r\n          playerHandTotal2: '',\r\n          playerHandImages: [],\r\n          playerHandImages2: [],\r\n          playerHasAce: false,\r\n          dealerHasAce: false,\r\n          dealerHandTotalPostAces: '',\r\n          playerHandTotalPostAces: '',\r\n          playerHandTotal2PreAces: '',\r\n          playerHandTotal2PostAces: '',\r\n          playerClickedStand: false,\r\n          playerClickedDouble: false,\r\n          playerClickedSplit: false,\r\n          checkWhoWonFunctionRan: false,\r\n          dealerWins: false,\r\n          playerWins: false,\r\n          playerBust: false,\r\n          playerBust2: false,\r\n          dealerBust: false,\r\n          playerDoubleBet: 0,\r\n          dealerCardBackShowing: false,\r\n      })\r\n  }\r\n\r\n  dealerHits = () => {\r\n    console.log('dealer hits function ran')\r\n    axios.get(`https://deckofcardsapi.com/api/deck/${this.state.deckID}/draw/?count=1`).then(response => {\r\n      const oneCardDealt = response.data.cards[0].code;\r\n      const remainingCards = response.data.remaining;\r\n      const cardImage = response.data.cards[0].image\r\n      const cardValue = response.data.cards[0].value\r\n\r\n      this.setState(prevState => {\r\n        return {\r\n          dealerHand: [...prevState.dealerHand, oneCardDealt],\r\n          dealerHandImages: [...prevState.dealerHandImages, cardImage],\r\n          dealerHandValues: [...prevState.dealerHandValues, cardValue],\r\n          countArray: [...prevState.countArray, cardValue],\r\n          cardsDealt: prevState.cardsDealt + 1,\r\n          decksPlayed: ((this.state.cardsDealt / 52).toFixed(2) ),\r\n          remainingCards: remainingCards,\r\n          remainingDecks: ( (this.state.deckCount - this.state.decksPlayed).toFixed(2) ),\r\n          trueCount: ((this.state.count / this.state.remainingDecks).toFixed(1)),\r\n          playerAdvantage: ( (-0.5 + (this.state.trueCount * 0.5)).toFixed(2) ),\r\n        }\r\n      }, () => this.countDealerTotal() )\r\n      this.whatsTheCountGame()\r\n    });\r\n  }\r\n\r\n  //  check the player total vs player totals\r\ncheckWhoWon = () => {\r\n  console.log('check who won function ran')\r\n \r\n    //  If Dealer Wins:\r\n    if(this.state.dealerHandTotalPostAces > this.state.playerHandTotalPostAces){\r\n      this.setState(prevState => {\r\n        return {\r\n          dealerWins: true,\r\n          playerWins: false,\r\n          playerBankroll: prevState.playerBankroll - (this.state.playerBet + this.state.playerDoubleBet)\r\n        }}, () => setTimeout(this.resetHand, 2000));\r\n    //  If it is a tie:\r\n    } else if (this.state.dealerHandTotalPostAces === this.state.playerHandTotalPostAces){\r\n      //  Bankroll stays the same \r\n      this.setState(prevState => {\r\n        return {\r\n          playerBankroll: prevState.playerBankroll\r\n        }}, () => setTimeout(this.resetHand, 2000));\r\n    //  If Player wins\r\n    } else {\r\n      //  increase bankroll by bet amount\r\n      this.setState(prevState => {\r\n        return {\r\n          dealerWins: false,\r\n          playerWins: true,\r\n          playerBankroll: prevState.playerBankroll + (this.state.playerBet + this.state.playerDoubleBet)\r\n        }}, () => setTimeout(this.resetHand, 2000));\r\n    }\r\n}\r\n\r\n  playerStands = () => {\r\n    //  When player stands need to check the value of the dealer hand.  \r\n    this.setState({\r\n      playerClickedStand: true,\r\n      dealerCardBackShowing: false,\r\n    });\r\n    //  If dealer hand value is lower than 17, need to deal themself enough cards until they are over 17.\r\n    //console.log(this.state.dealerHandTotalPostAces)\r\n    if (this.state.dealerHandTotalPostAces < 17){\r\n      //console.log('dealer has less than 17')\r\n      setTimeout(this.dealerHits, 500)\r\n    } else {\r\n      this.checkWhoWon()\r\n    }\r\n}\r\n\r\nplayerDoubles = () => {\r\n  console.log('Player choose to DOUBLE DOWN function ran')\r\n  //  Need to check if player is on their first 2 cards.  Double is not allowed if they have more than 2 cards.\r\n  //  If player chooses to double, they do not have the option to hit afterwards.  So we will need to set state of a varible //  to check if double has been set, and if so, disable the hit function for this hand.\r\n  if (this.state.playerHand.length === 2){\r\n    //console.log('you ARE alowed to double')\r\n    //  Need to set state that the player chose to double so we can run a check on that in another function\r\n    this.setState({\r\n      playerClickedDouble: true,\r\n      playerDoubleBet: this.state.playerBet,\r\n    })\r\n    //  Player gets dealt only one card.  then we need to run the stand function.\r\n    this.dealOneCard()\r\n  }else {\r\n    alert('You are not alowed to double right now');\r\n  }\r\n}\r\n\r\nplayerSplits = () => {\r\n  console.log('Player choose to SPLIT function ran');\r\n  console.log('PLAYER HAND IS :  ' + this.state.playerHand)\r\n  console.log('PLAYER HAND VALUES IS :  ' + this.state.playerHandValues)\r\n  console.log('PLAYER HAND NUMERICAL VALUES BEFORE SPLIT IS :  ' + this.state.playerNumericalHandValues)\r\n  console.log('PLAYER HAND NUMERICAL VALUES 2 BEFORE SPLIT IS :  ' + this.state.playerNumericalHandValues2)\r\n  \r\n  //console.log(this.state.playerNumericalHandValues)\r\n  //  Need to check if player is on their first 2 cards.  Split is not allowed if they have more than 2 cards per hand. \r\n  if (this.state.playerNumericalHandValues.length === 2 ){\r\n    ////  ADD THIS LINE BACK ITO THE IF STATEMENT ABOVE !!  REMOVED FOR TESTING SPLITS!!\r\n    // && this.state.playerNumericalHandValues[0] === this.state.playerNumericalHandValues[1]\r\n    //console.log('you ARE alowed to split');\r\n    //  Need to set state that the player chose to double so we can run a check on that in another function\r\n    this.setState({\r\n      playerClickedSplit: true,\r\n    })\r\n    this.state.playerNumericalHandValues2.push(this.state.playerNumericalHandValues.pop());\r\n    this.state.playerHand2.push(this.state.playerHand.pop());\r\n    this.state.playerHandValues2.push(this.state.playerHandValues2.pop());\r\n    this.state.playerHandImages2.push(this.state.playerHandImages.pop());\r\n    console.log('PLAYER HAND NUMERICAL VALUES AFTER SPLIT IS :  ' + this.state.playerNumericalHandValues)\r\n    console.log('PLAYER HAND NUMERICAL VALUES 2 AFTER SPLIT IS :  ' + this.state.playerNumericalHandValues2)\r\n\r\n    this.calculateSplitHandTotals()\r\n\r\n  } else {\r\n    alert('You are not alowed to split right now');\r\n  } \r\n}\r\n\r\ncalculateSplitHandTotals = () => {\r\n  let numericalHand1 = this.state.playerNumericalHandValues\r\n  let numericalHand2 = this.state.playerNumericalHandValues2\r\n\r\n  console.log(numericalHand1)\r\n  console.log(numericalHand2)\r\n  const reducer = (accumulator, currentValue) => accumulator + currentValue;\r\n    let playerHandTotal1 = numericalHand1.reduce(reducer);  \r\n    let playerHandTotal2 = numericalHand2.reduce(reducer);  \r\n    //  Sets the state for the count of that player hand with aces only being worth 1\r\n    this.setState(() => ({\r\n      playerHandTotalPreAces: playerHandTotal1,\r\n      playerHandTotal2PreAces: playerHandTotal2\r\n    }), () => this.adjustPlayerSplitCountWithAces() );\r\n}\r\n\r\nadjustPlayerSplitCountWithAces = () => {\r\n  let playerTotalPreAces1 = this.state.playerHandTotalPreAces  \r\n  let playerTotalPreAces2 = this.state.playerHandTotal2PreAces\r\n  if (this.state.playerHasAce === true && playerTotalPreAces1 <= 11){\r\n    let finalPlayerTotal1 = playerTotalPreAces1 + 10;\r\n    let finalPlayerTotal2 = playerTotalPreAces2 + 10;\r\n    this.setState(() => ({\r\n      playerHandTotalPostAces: finalPlayerTotal1,\r\n      playerHandTotal2PostAces: finalPlayerTotal2,\r\n    }), () =>  this.didPlayerBustSplitHand1() )\r\n  } else {\r\n    this.setState(() => ({\r\n      playerHandTotalPostAces: playerTotalPreAces1,\r\n      playerHandTotal2PostAces: playerTotalPreAces2\r\n    }), () =>  this.didPlayerBustSplitHand1() )\r\n  }\r\n}\r\n\r\ndidPlayerBustSplitHand1 = () => {\r\n  console.log('playerHandTotal1PostAces : '+  this.state.playerHandTotalPostAces)\r\n  console.log('playerHandTotal2PostAces : '+  this.state.playerHandTotal2PostAces)\r\n//  Play hand 1 first\r\n  if (this.state.playerHandTotalPostAces < 21){\r\n    console.log('Hand 1 didnt bust')\r\n  }\r\n}\r\n\r\n// playerHitsSplitHand1 = () => {\r\n//   axios.get(`https://deckofcardsapi.com/api/deck/${this.state.deckID}/draw/?count=1`).then(response => {\r\n//     const oneCardDealt = response.data.cards[0].code;\r\n//     const remainingCards = response.data.remaining;\r\n//     const cardImage = response.data.cards[0].image\r\n//     const cardValue = response.data.cards[0].value\r\n//   console.log('cardValue' + cardValue)\r\n//     this.setState(prevState => {\r\n//       return {\r\n//         playerHand: [...prevState.playerHand, oneCardDealt],\r\n//         playerHandImages: [...prevState.playerHandImages, cardImage],\r\n//         playerHandValues: [...prevState.playerHandValues, cardValue],\r\n//         countArray: [...prevState.countArray, cardValue],\r\n//         cardsDealt: prevState.cardsDealt + 1,\r\n//         decksPlayed: ((this.state.cardsDealt / 52).toFixed(2) ),\r\n//         remainingCards: remainingCards,\r\n//         remainingDecks: ( (this.state.deckCount - this.state.decksPlayed).toFixed(2) ),\r\n//         trueCount: ((this.state.count / this.state.remainingDecks).toFixed(1)),\r\n//       }\r\n//       //  Once state is set from the new card, re-run the player hand total functions\r\n//     }, () => this.calculateSplitHandTotals()) \r\n//     this.whatsTheCountGame()\r\n//   })\r\n// }\r\n////////   Adding to player bets    //////////////////\r\n\r\nbet1 = () => {\r\n  //console.log('player wants to bet 1')\r\n  this.setState(prevState => {\r\n    return {\r\n      playerBet: prevState.playerBet + 1\r\n    }\r\n  })\r\n}\r\nbet5 = () => {\r\n  this.setState(prevState => {\r\n    return {\r\n      playerBet: prevState.playerBet + 5\r\n    }\r\n  })\r\n}\r\nbet25 = () => {\r\n  this.setState(prevState => {\r\n    return {\r\n      playerBet: prevState.playerBet + 25\r\n    }\r\n  })\r\n}\r\nbet50 = () => {\r\n  this.setState(prevState => {\r\n    return {\r\n      playerBet: prevState.playerBet + 50\r\n    }\r\n  })\r\n}\r\nbet100 = () => {\r\n  this.setState(prevState => {\r\n    return {\r\n      playerBet: prevState.playerBet + 100\r\n    }\r\n  })\r\n}\r\nbet500 = () => {\r\n  this.setState(prevState => {\r\n    return {\r\n      playerBet: prevState.playerBet + 500\r\n    }\r\n  })\r\n}\r\nclearBet = () => {\r\n  this.setState({\r\n      playerBet: 0\r\n  })\r\n}\r\n\r\n\r\n\r\nwhatsTheCountGame = () => {\r\n  //  if card value is 10 or greater, count is subtracted by 1\r\n  console.log('check the count function ran')\r\n  let myCountingArray=[]\r\n  this.state.countArray.forEach(element => {\r\n    let numbericalElement = 0\r\n    \r\n    if (element === 'ACE' || element === 'KING' || element === 'QUEEN' ||element === 'JACK'){\r\n      numbericalElement = 10\r\n      myCountingArray.push(numbericalElement)\r\n    } else{\r\n      const numbericalElement = parseInt(element)\r\n      myCountingArray.push(numbericalElement)\r\n    }\r\n  });\r\n  let myConvertedCountArray = [];\r\n  \r\n  myCountingArray.forEach( number => {\r\n    if (number < 7){\r\n      let countNumber = 1\r\n      myConvertedCountArray.push(countNumber)\r\n    } else if(number >= 10){\r\n      let countNumber = -1\r\n      myConvertedCountArray.push(countNumber)\r\n    } else{\r\n      let countNumber = 0\r\n      myConvertedCountArray.push(countNumber)\r\n    }\r\n  })\r\n\r\n  const reducer = (accumulator, currentValue) => accumulator + currentValue;\r\n    let gameCount = myConvertedCountArray.reduce(reducer);  \r\n    this.setState({\r\n      count: gameCount\r\n    })\r\n}\r\nhideShowCount = () => {\r\n    console.log('hide show count ran')\r\n  if(this.state.showCountDiv === false){\r\n    this.setState({\r\n      showCountDiv: true,\r\n    })\r\n  } else{\r\n    this.setState({\r\n      showCountDiv: false,\r\n    })\r\n  }\r\n}\r\n\r\nhideShowAdvice = () => {\r\n  console.log('hide show advice ran')\r\nif(this.state.showAdviceDiv === false){\r\n  this.setState({\r\n    showAdviceDiv: true,\r\n  })\r\n} else{\r\n  this.setState({\r\n    showAdviceDiv: false,\r\n  })\r\n}\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar />\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home}/>\r\n          <Route path=\"/play\" render={props => \r\n              <Play {...props} \r\n              dealHand={this.dealHand}\r\n              dealOneCard={this.dealOneCard} \r\n              playerStands={this.playerStands} \r\n              playerClickedStand={this.state.playerClickedStand} \r\n              playerDoubles={this.playerDoubles} \r\n              playerClickedDouble={this.state.playerClickedDouble} \r\n              playerDoubleBet={this.state.playerDoubleBet} \r\n              playerClickedSplit={this.state.playerClickedSplit} \r\n              playerSplits={this.playerSplits} \r\n              clearBet={this.clearBet}\r\n              countPlayerTotal={this.state.playerHandTotal}\r\n              dealerHandImages={this.state.dealerHandImages} \r\n              playerHandImages={this.state.playerHandImages} \r\n              playerHandImages2={this.state.playerHandImages2} \r\n              dealerHandValues={this.state.dealerHandValues} \r\n              dealerHandTotal={this.state.dealerHandTotalPostAces} \r\n              playerHandValues={this.state.playerHandValues}\r\n              playerHandTotal={this.state.playerHandTotalPostAces} \r\n              playerHand2Total={this.state.playerHandTotal2PostAces} \r\n              playerBet={this.state.playerBet}\r\n              playerBankroll={this.state.playerBankroll}\r\n              bet1={this.bet1} \r\n              bet5={this.bet5} \r\n              bet25={this.bet25} \r\n              bet50={this.bet50} \r\n              bet100={this.bet100} \r\n              bet500={this.bet500}\r\n              dealerWins={this.state.dealerWins}\r\n              playerWins={this.state.playerWins}\r\n              dealerBust={this.state.dealerBust}\r\n              playerBust={this.state.playerBust}\r\n              gameCount={this.state.count}\r\n              hideShowCount={this.hideShowCount}\r\n              cardsDealt={this.state.cardsDealt}\r\n              decksPlayed={this.state.decksPlayed}\r\n              remainingCards={this.state.remainingCards}\r\n              remainingDecks={this.state.remainingDecks}\r\n              trueCount={this.state.trueCount}\r\n              playerBaseBet={this.state.playerBaseBet}\r\n              showCountDiv={this.state.showCountDiv}\r\n              showAdviceDiv={this.state.showAdviceDiv}\r\n              hideShowAdvice={this.hideShowAdvice}\r\n              playerAdvantage={this.state.playerAdvantage}\r\n              dealerCardBackShowing={this.state.dealerCardBackShowing}\r\n              />}/>\r\n          <Route path=\"/train\" component={Train}/>\r\n          <Route path=\"/learn\" component={Learn}/>\r\n          <Route path=\"/TrainBasicStrategy\" component={TrainBasicStrategy}/>\r\n          <Route path=\"/TrainSelfPacedCount\" component={TrainSelfPacedCount}/>\r\n          <Route path=\"/TrainSpeedCount\" component={TrainSpeedCount}/>\r\n          <Route path=\"/TrainRunningCountTrueCount\" component={TrainRunningCountTrueCount}/>\r\n          <Route path=\"/TrainBetSizing\" component={TrainBetSizing}/>\r\n        </Switch>\r\n\r\n      </div>\r\n       \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React, { Component } from 'react'\r\n\r\nconst CasinoRulesContext = React.createContext()\r\n\r\nclass CasinoRulesProvider extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            dealerStandsSoft17: true,\r\n            doubleAfterSplitAllowed: true,\r\n            surrenderAllowed: true,\r\n        }\r\n    }\r\n\r\n    setGameRules = (name, checked) => {\r\n        this.setState({\r\n            [name]: checked\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <CasinoRulesContext.Provider\r\n                value={{\r\n                    dealerStandsSoft17: this.state.dealerStandsSoft17,\r\n                    doubleAfterSplitAllowed: this.state.doubleAfterSplitAllowed,\r\n                    surrenderAllowed: this.state.surrenderAllowed,\r\n                    setGameRules: this.setGameRules,\r\n                }}>\r\n                { this.props.children }\r\n            </CasinoRulesContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CasinoRulesProvider\r\n\r\n\r\nexport const withCasinoRules = C => props => (\r\n    <CasinoRulesContext.Consumer>\r\n        {value => <C {...props} {...value}/>}\r\n    </CasinoRulesContext.Consumer>\r\n)\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {HashRouter} from 'react-router-dom'\r\nimport CasinoRulesProvider from './context/CasinoRulesProvider'\r\nimport CorrectPlayProvider from './context/CorrectPlayProvider'\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <CorrectPlayProvider>\r\n        <CasinoRulesProvider>\r\n            <App />\r\n        </CasinoRulesProvider>\r\n        </CorrectPlayProvider>\r\n    </HashRouter>, \r\ndocument.getElementById('root'));\r\n"],"sourceRoot":""}